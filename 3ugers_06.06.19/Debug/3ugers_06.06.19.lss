
3ugers_06.06.19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7b  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d72  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057e  00000000  00000000  00001ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000642  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  00002c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002dcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	54 c0       	rjmp	.+168    	; 0x1b0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:


int main(void)
{
 
	SPI_MasterInit();						//initialize SPI
 10a:	08 d0       	rcall	.+16     	; 0x11c <SPI_MasterInit>
	uart0_Init(MYUBRRF);					//initialize uart (for test)
 10c:	87 e6       	ldi	r24, 0x67	; 103
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	3d d0       	rcall	.+122    	; 0x18c <uart0_Init>

	
    while (1) 
    {
			MCU_to_FPGA(3, 50, 1);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	62 e3       	ldi	r22, 0x32	; 50
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0b d0       	rcall	.+22     	; 0x130 <MCU_to_FPGA>
 11a:	fb cf       	rjmp	.-10     	; 0x112 <main+0x8>

0000011c <SPI_MasterInit>:
#include <util/delay.h>
#include <avr/interrupt.h>  

void SPI_MasterInit(){

	DDRB |=(1<<DDB2)|(1<< DDB1)|(1<<DDB0);			//MOSI, SCK, !SS outputs!
 11c:	84 b1       	in	r24, 0x04	; 4
 11e:	87 60       	ori	r24, 0x07	; 7
 120:	84 b9       	out	0x04, r24	; 4
	SPCR |=(1<<SPE)|(1<<MSTR);						//spi_enable,interrupt_enable, master
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	80 65       	ori	r24, 0x50	; 80
 126:	8c bd       	out	0x2c, r24	; 44
	SPCR |=(1<<SPI2X)|(1<<SPR1);					//clk frequency fosc/32
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	8c bd       	out	0x2c, r24	; 44
 12e:	08 95       	ret

00000130 <MCU_to_FPGA>:
	char MISO, MISO1;
	
	do{				//'do while' in case ChkSum is the same
		

		ChkSum = SYNC ^ shape ^ ampl ^ freq; 
 130:	7a e5       	ldi	r23, 0x5A	; 90
 132:	54 2f       	mov	r21, r20
 134:	57 27       	eor	r21, r23
 136:	56 27       	eor	r21, r22
 138:	58 27       	eor	r21, r24
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
		SPDR  =   SYNC;											//Data Register is ready
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
		;
		MISO = SPDR;											//return data register
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 13a:	21 e0       	ldi	r18, 0x01	; 1

		ChkSum = SYNC ^ shape ^ ampl ^ freq; 
		
		
		//SYNC
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 13c:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   SYNC;											//Data Register is ready
 13e:	7e bd       	out	0x2e, r23	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <MCU_to_FPGA+0x10>
		;
		MISO = SPDR;											//return data register
 146:	3e b5       	in	r19, 0x2e	; 46
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 148:	25 b9       	out	0x05, r18	; 5

		//Shape
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 14a:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   shape;										//Data Register is ready
 14c:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 14e:	0d b4       	in	r0, 0x2d	; 45
 150:	07 fe       	sbrs	r0, 7
 152:	fd cf       	rjmp	.-6      	; 0x14e <MCU_to_FPGA+0x1e>
		;
		MISO1 = SPDR;											//Get second half of data
 154:	9e b5       	in	r25, 0x2e	; 46
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 156:	25 b9       	out	0x05, r18	; 5

		//Ampl
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 158:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   ampl;											//Data Register is ready
 15a:	6e bd       	out	0x2e, r22	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 15c:	0d b4       	in	r0, 0x2d	; 45
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <MCU_to_FPGA+0x2c>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 162:	25 b9       	out	0x05, r18	; 5

		//Freq
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 164:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   freq;											//Data Register is ready
 166:	4e bd       	out	0x2e, r20	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 168:	0d b4       	in	r0, 0x2d	; 45
 16a:	07 fe       	sbrs	r0, 7
 16c:	fd cf       	rjmp	.-6      	; 0x168 <MCU_to_FPGA+0x38>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 16e:	25 b9       	out	0x05, r18	; 5

		//ChkSum
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 170:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   ChkSum;										//Data Register is ready
 172:	5e bd       	out	0x2e, r21	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 174:	0d b4       	in	r0, 0x2d	; 45
 176:	07 fe       	sbrs	r0, 7
 178:	fd cf       	rjmp	.-6      	; 0x174 <MCU_to_FPGA+0x44>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 17a:	25 b9       	out	0x05, r18	; 5


		MISO =  (MISO << 1) | (MISO1 >> 7);						// the MISO signal is shifted one bit too far this compensates for that
 17c:	33 0f       	add	r19, r19
 17e:	99 1f       	adc	r25, r25
 180:	99 27       	eor	r25, r25
 182:	99 1f       	adc	r25, r25
 184:	93 2b       	or	r25, r19
		//til test
		//		char str[100] ={'\0'};
		// 		sprintf(str, "sync [%x],  shape [%x],  ampl [%x],  freq [%x],  chksum [%x],   MISO [%x],  counter = %d = %x",SYNC, shape, ampl, freq, ChkSum, MISO, counter, counter);
		// 		putsUSART0(str);
		
	}while (MISO != ChkSum);
 186:	59 13       	cpse	r21, r25
 188:	d9 cf       	rjmp	.-78     	; 0x13c <MCU_to_FPGA+0xc>
}
 18a:	08 95       	ret

0000018c <uart0_Init>:
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 192:	e1 ec       	ldi	r30, 0xC1	; 193
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	20 81       	ld	r18, Z
 198:	28 61       	ori	r18, 0x18	; 24
 19a:	20 83       	st	Z, r18
 19c:	e2 ec       	ldi	r30, 0xC2	; 194
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	20 81       	ld	r18, Z
 1a2:	26 60       	ori	r18, 0x06	; 6
 1a4:	20 83       	st	Z, r18
 1a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
