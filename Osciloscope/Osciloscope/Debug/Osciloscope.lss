
Osciloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000b14  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e0d  00800206  00800206  00000bae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029bd  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000122a  00000000  00000000  000037fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001573  00000000  00000000  00004a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00005f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9b  00000000  00000000  00006578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016f2  00000000  00000000  00007013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c3       	rjmp	.+1624   	; 0x69e <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	2d c3       	rjmp	.+1626   	; 0x6d0 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	87 c3       	rjmp	.+1806   	; 0x7a0 <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e1       	ldi	r30, 0x14	; 20
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	20 e1       	ldi	r18, 0x10	; 16
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 31       	cpi	r26, 0x13	; 19
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0d d1       	rcall	.+538    	; 0x33a <main>
 120:	f7 c4       	rjmp	.+2542   	; 0xb10 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_adc>:
#include <avr/interrupt.h>
#define F_CPU 16000000UL

//Initialize adc
void init_adc(char ADC_channel){
		ADCSRA|=(1<<ADPS2)|(1<<ADEN)|(1<<ADIE); //1 MHz med 16 Prescale, ADC Enable, ADC Intertupt Enable
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	9c 68       	ori	r25, 0x8C	; 140
 12c:	90 83       	st	Z, r25
		
		
		//ADCSRB|=(1<<ADTS0)|(1<<ADTS2); //Auto-trigger = Timer1_Compare_Match_B
		
		
		ADMUX = ADC_channel;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 83       	st	Z, r24
		ADMUX |= (1<<ADLAR); //ADC external Spændings Refference, Left shift resultat
 134:	90 81       	ld	r25, Z
 136:	90 62       	ori	r25, 0x20	; 32
 138:	90 83       	st	Z, r25
		DIDR0 = (1<<ADC_channel);
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	a9 01       	movw	r20, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <init_adc+0x22>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <init_adc+0x1e>
 14a:	ee e7       	ldi	r30, 0x7E	; 126
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	40 83       	st	Z, r20
		DIDR0 =~DIDR0;
 150:	80 81       	ld	r24, Z
 152:	80 95       	com	r24
 154:	80 83       	st	Z, r24
		DIDR2 =0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 15c:	08 95       	ret

0000015e <I2C_Init>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	return TWDR;		/* Return received data */
}
 15e:	08 9a       	sbi	0x01, 0	; 1
 160:	10 9a       	sbi	0x02, 0	; 2
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <I2C_Init+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <I2C_Init+0x14>
 172:	00 00       	nop
 174:	82 e1       	ldi	r24, 0x12	; 18
 176:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 17a:	e9 eb       	ldi	r30, 0xB9	; 185
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8c 7f       	andi	r24, 0xFC	; 252
 182:	80 83       	st	Z, r24
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 18a:	08 95       	ret

0000018c <I2C_Start>:
 18c:	94 ea       	ldi	r25, 0xA4	; 164
 18e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	90 81       	ld	r25, Z
 198:	99 23       	and	r25, r25
 19a:	ec f7       	brge	.-6      	; 0x196 <I2C_Start+0xa>
 19c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 1a0:	98 7f       	andi	r25, 0xF8	; 248
 1a2:	98 30       	cpi	r25, 0x08	; 8
 1a4:	99 f4       	brne	.+38     	; 0x1cc <I2C_Start+0x40>
 1a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <I2C_Start+0x28>
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	88 31       	cpi	r24, 0x18	; 24
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Start+0x44>
 1c4:	80 32       	cpi	r24, 0x20	; 32
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <I2C_Start+0x48>
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	08 95       	ret

000001d8 <I2C_Write>:
 1d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	ec f7       	brge	.-6      	; 0x1e6 <I2C_Write+0xe>
 1ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 1f0:	88 7f       	andi	r24, 0xF8	; 248
 1f2:	88 32       	cpi	r24, 0x28	; 40
 1f4:	21 f0       	breq	.+8      	; 0x1fe <I2C_Write+0x26>
 1f6:	80 33       	cpi	r24, 0x30	; 48
 1f8:	21 f0       	breq	.+8      	; 0x202 <I2C_Write+0x2a>
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	08 95       	ret
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <I2C_Stop>:

void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 206:	84 e9       	ldi	r24, 0x94	; 148
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 20c:	ec eb       	ldi	r30, 0xBC	; 188
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	84 fd       	sbrc	r24, 4
 214:	fd cf       	rjmp	.-6      	; 0x210 <I2C_Stop+0xa>
 216:	08 95       	ret

00000218 <init_timer1>:

uint8_t _i2c_address;
uint8_t display_buffer[1024];

void init_timer1(unsigned int sps){
	TCCR1A = 0;
 218:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;
 21c:	e1 e8       	ldi	r30, 0x81	; 129
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	10 82       	st	Z, r1
	TCNT1 = 0;
 222:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 226:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B |=(1<<WGM12)|(1<<CS11)|(1<<CS10); //CTC mode
 22a:	20 81       	ld	r18, Z
 22c:	2b 60       	ori	r18, 0x0B	; 11
 22e:	20 83       	st	Z, r18
	
	OCR1A = (250000/sps)-1; //=(16.000.000*(1/sps)-64)/64
 230:	9c 01       	movw	r18, r24
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	60 e9       	ldi	r22, 0x90	; 144
 238:	70 ed       	ldi	r23, 0xD0	; 208
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	16 d4       	rcall	.+2092   	; 0xa6c <__divmodsi4>
 240:	21 50       	subi	r18, 0x01	; 1
 242:	31 09       	sbc	r19, r1
 244:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 248:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	// 	}
	// 	else{
	// 		TCCR1B |=(1<<CS10);
	// 		OCR1A = (F_CPU/(sps))-1;
	// 	}
	TIMSK1 |=(1<<OCIE1A); //interrupt when TCNNT1=OCR1A value
 24c:	ef e6       	ldi	r30, 0x6F	; 111
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	82 60       	ori	r24, 0x02	; 2
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <adc_packet_send>:
}

void adc_packet_send(volatile char *ptr){
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	fc 01       	movw	r30, r24
		adc_send[j] = *ptr;
		ptr++;
		j++;
	}
	putsUSART1(adc_send, record_length3+6);
}
 26a:	0d b7       	in	r16, 0x3d	; 61
 26c:	1e b7       	in	r17, 0x3e	; 62
	TIMSK1 |=(1<<OCIE1A); //interrupt when TCNNT1=OCR1A value
}

void adc_packet_send(volatile char *ptr){
	int j = 5;
	char adc_send[record_length3 + 7];
 26e:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 272:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 276:	07 96       	adiw	r24, 0x07	; 7
 278:	2d b7       	in	r18, 0x3d	; 61
 27a:	3e b7       	in	r19, 0x3e	; 62
 27c:	28 1b       	sub	r18, r24
 27e:	39 0b       	sbc	r19, r25
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	3e bf       	out	0x3e, r19	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	2d bf       	out	0x3d, r18	; 61
 28a:	8d b7       	in	r24, 0x3d	; 61
 28c:	9e b7       	in	r25, 0x3e	; 62
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	7c 01       	movw	r14, r24
	int totlen = record_length3+7;
 292:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 296:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 29a:	07 96       	adiw	r24, 0x07	; 7
	char len2 = totlen;
	char len1 = (totlen >> 8);
	adc_send[0] = 0x55;
 29c:	25 e5       	ldi	r18, 0x55	; 85
 29e:	ad b7       	in	r26, 0x3d	; 61
 2a0:	be b7       	in	r27, 0x3e	; 62
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	2c 93       	st	X, r18
	adc_send[1] = 0xAA;
 2a6:	2a ea       	ldi	r18, 0xAA	; 170
 2a8:	d7 01       	movw	r26, r14
 2aa:	11 96       	adiw	r26, 0x01	; 1
 2ac:	2c 93       	st	X, r18
 2ae:	11 97       	sbiw	r26, 0x01	; 1
	adc_send[2] = len1;
 2b0:	12 96       	adiw	r26, 0x02	; 2
 2b2:	9c 93       	st	X, r25
 2b4:	12 97       	sbiw	r26, 0x02	; 2
	adc_send[3] = len2;
 2b6:	13 96       	adiw	r26, 0x03	; 3
 2b8:	8c 93       	st	X, r24
 2ba:	13 97       	sbiw	r26, 0x03	; 3
	adc_send[4] = 0x02;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	14 96       	adiw	r26, 0x04	; 4
 2c0:	8c 93       	st	X, r24
	char check = 0;
	adc_send[record_length3 + 5] = check;
 2c2:	a0 91 04 07 	lds	r26, 0x0704	; 0x800704 <record_length3>
 2c6:	b0 91 05 07 	lds	r27, 0x0705	; 0x800705 <record_length3+0x1>
 2ca:	ae 0d       	add	r26, r14
 2cc:	bf 1d       	adc	r27, r15
 2ce:	15 96       	adiw	r26, 0x05	; 5
 2d0:	1c 92       	st	X, r1
	adc_send[record_length3 + 6] = check;
 2d2:	a0 91 04 07 	lds	r26, 0x0704	; 0x800704 <record_length3>
 2d6:	b0 91 05 07 	lds	r27, 0x0705	; 0x800705 <record_length3+0x1>
 2da:	ae 0d       	add	r26, r14
 2dc:	bf 1d       	adc	r27, r15
 2de:	16 96       	adiw	r26, 0x06	; 6
 2e0:	1c 92       	st	X, r1
	
	while(j < record_length3+5){
 2e2:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 2e6:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 2ea:	05 96       	adiw	r24, 0x05	; 5
 2ec:	06 97       	sbiw	r24, 0x06	; 6
 2ee:	8c f0       	brlt	.+34     	; 0x312 <adc_packet_send+0xba>
 2f0:	d7 01       	movw	r26, r14
 2f2:	15 96       	adiw	r26, 0x05	; 5
 2f4:	45 e0       	ldi	r20, 0x05	; 5
 2f6:	50 e0       	ldi	r21, 0x00	; 0
		adc_send[j] = *ptr;
 2f8:	91 91       	ld	r25, Z+
 2fa:	9d 93       	st	X+, r25
		ptr++;
		j++;
 2fc:	4f 5f       	subi	r20, 0xFF	; 255
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
	adc_send[4] = 0x02;
	char check = 0;
	adc_send[record_length3 + 5] = check;
	adc_send[record_length3 + 6] = check;
	
	while(j < record_length3+5){
 300:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <record_length3>
 304:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <record_length3+0x1>
 308:	2b 5f       	subi	r18, 0xFB	; 251
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	42 17       	cp	r20, r18
 30e:	53 07       	cpc	r21, r19
 310:	9c f3       	brlt	.-26     	; 0x2f8 <adc_packet_send+0xa0>
		adc_send[j] = *ptr;
		ptr++;
		j++;
	}
	putsUSART1(adc_send, record_length3+6);
 312:	60 91 04 07 	lds	r22, 0x0704	; 0x800704 <record_length3>
 316:	70 91 05 07 	lds	r23, 0x0705	; 0x800705 <record_length3+0x1>
 31a:	6a 5f       	subi	r22, 0xFA	; 250
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	c7 01       	movw	r24, r14
 320:	77 d3       	rcall	.+1774   	; 0xa10 <putsUSART1>
}
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	1e bf       	out	0x3e, r17	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0d bf       	out	0x3d, r16	; 61
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <main>:

int main(void)
{
	init_adc(0x00);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	f3 de       	rcall	.-538    	; 0x124 <init_adc>
	uart_Init(16);
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	3a d3       	rcall	.+1652   	; 0x9b8 <uart_Init>
	uart0_Init(16);
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	90 e0       	ldi	r25, 0x00	; 0
	I2C_Init();
 348:	49 d3       	rcall	.+1682   	; 0x9dc <uart0_Init>
	InitializeDisplay();
 34a:	09 df       	rcall	.-494    	; 0x15e <I2C_Init>
 34c:	c7 d2       	rcall	.+1422   	; 0x8dc <InitializeDisplay>
	reset_display();
 34e:	30 d3       	rcall	.+1632   	; 0x9b0 <reset_display>
	SPI_MasterInit();
 350:	81 d2       	rcall	.+1282   	; 0x854 <SPI_MasterInit>
 352:	78 94       	sei
	sei();
 354:	84 e6       	ldi	r24, 0x64	; 100
	init_timer1(100);
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	5f df       	rcall	.-322    	; 0x218 <init_timer1>
 35a:	44 24       	eor	r4, r4
 35c:	43 94       	inc	r4
					}	
					}
				else if(sample_flag == 0){
					if(adc_send_done == 2){
						adc_packet_send(adc_buffer1);
						adc_send_done = 1;	
 35e:	68 94       	set
 360:	22 24       	eor	r2, r2
			//if(record_length3 > 0){
			if (flagADC == 1){
				if(sample_flag == 1){
					if(adc_send_done == 1){
						adc_packet_send(adc_buffer2);
						adc_send_done = 2;
 362:	21 f8       	bld	r2, 1
 364:	0f 2e       	mov	r0, r31
 366:	f7 e0       	ldi	r31, 0x07	; 7
			break;
			
			case 2:

			if (flagUART == 0){
				sample_rate = data_buffer[5];
 368:	ef 2e       	mov	r14, r31
 36a:	f0 e1       	ldi	r31, 0x10	; 16
 36c:	ff 2e       	mov	r15, r31
 36e:	f0 2d       	mov	r31, r0
 370:	0f 2e       	mov	r0, r31
 372:	f8 e8       	ldi	r31, 0x88	; 136
				if(record_length3 < record_length_min){
					record_length3 = record_length_min + 1;
				}
				
				//init_timer1(sample_rate3);
				OCR1A = (250000/sample_rate3)-1;
 374:	cf 2e       	mov	r12, r31
 376:	d1 2c       	mov	r13, r1
 378:	f0 2d       	mov	r31, r0
 37a:	aa 24       	eor	r10, r10
 37c:	a3 94       	inc	r10
				record_length = data_buffer[7];
				record_length2 = data_buffer[8];
				record_length3 = (record_length<<8)|record_length2;
				int record_length_min = -1 * ((7 * sample_rate3)/(-11520 + sample_rate3));
				if(record_length3 < record_length_min){
					record_length3 = record_length_min + 1;
 37e:	b1 2c       	mov	r11, r1
 380:	0f 2e       	mov	r0, r31
 382:	f8 e1       	ldi	r31, 0x18	; 24
			
			break;
		
			case 3:
			if(flagUART == 0){
				OCR1A = 24; // sample rate 10000 sps
 384:	8f 2e       	mov	r8, r31
 386:	91 2c       	mov	r9, r1
 388:	f0 2d       	mov	r31, r0
 38a:	0f 2e       	mov	r0, r31
 38c:	f3 e0       	ldi	r31, 0x03	; 3
				Shape = 3; //sinus
 38e:	3f 2e       	mov	r3, r31
 390:	f0 2d       	mov	r31, r0
 392:	55 24       	eor	r5, r5
 394:	5a 94       	dec	r5
				Amplitude = 0xff; //3,3V
 396:	03 e1       	ldi	r16, 0x13	; 19
 398:	12 e0       	ldi	r17, 0x02	; 2
				
					Bodeplot_Send[0] = 0x55;
 39a:	0f 2e       	mov	r0, r31
 39c:	f7 e1       	ldi	r31, 0x17	; 23

					Amplitude_Bodeplot = (Amplitude_max - Amplitude_min);
					Bodeplot_Send[j+5] = Amplitude_Bodeplot;
				}
			
				Bodeplot_Send[260] = 0x00;
 39e:	6f 2e       	mov	r6, r31
 3a0:	f3 e0       	ldi	r31, 0x03	; 3
 3a2:	7f 2e       	mov	r7, r31
 3a4:	f0 2d       	mov	r31, r0
 3a6:	cd e0       	ldi	r28, 0x0D	; 13
 3a8:	db e0       	ldi	r29, 0x0B	; 11
				Shape = 0;
				Amplitude = 0;
				Frequency = 0;
			}
			
			data_return[0] = 0x55; //sync
 3aa:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <type>
	sei();
	init_timer1(100);

	while (1)
	{	
		switch(type){
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <main+0x7a>
 3b2:	7c c0       	rjmp	.+248    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	09 f4       	brne	.+2      	; 0x3ba <main+0x80>
 3b8:	06 c1       	rjmp	.+524    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	b1 f7       	brne	.-20     	; 0x3aa <main+0x70>
 3be:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <flagUART>
			
			case 1:
			if(flagUART == 0){
 3c2:	81 11       	cpse	r24, r1
 3c4:	f2 cf       	rjmp	.-28     	; 0x3aa <main+0x70>
 3c6:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <flagUART>
			flagUART = 1;
 3ca:	f7 01       	movw	r30, r14
 3cc:	85 81       	ldd	r24, Z+5	; 0x05
		
			BTN = data_buffer[5];
 3ce:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <BTN>
 3d2:	96 81       	ldd	r25, Z+6	; 0x06
 3d4:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <SW>
			SW = data_buffer[6];
 3d8:	81 11       	cpse	r24, r1
 3da:	17 c0       	rjmp	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			
			if (BTN==0){
 3dc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ActiveIndicator>
				if (ActiveIndicator == 0){
 3e0:	81 11       	cpse	r24, r1
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <main+0xb0>
 3e4:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <Shape>
					Shape = SW;
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <main+0xc2>
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	19 f4       	brne	.+6      	; 0x3f4 <main+0xba>
				}
				if (ActiveIndicator == 1){
 3ee:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <Amplitude>
					Amplitude = SW;
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <main+0xc2>
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	11 f4       	brne	.+4      	; 0x3fc <main+0xc2>
				}
				if (ActiveIndicator == 2){
 3f8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <Frequency>
					Frequency = SW;
 3fc:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Frequency>
				}
				
				MCU_to_FPGA(Shape,Amplitude,Frequency);
 400:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <Amplitude>
 404:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
 408:	2f d2       	rcall	.+1118   	; 0x868 <MCU_to_FPGA>
 40a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <BTN>
			}
			
			if (BTN==1){
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	89 f4       	brne	.+34     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 412:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ActiveIndicator>
				if (ActiveIndicator == 2){
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	19 f4       	brne	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <ActiveIndicator>
					ActiveIndicator = 0;
 41e:	29 c0       	rjmp	.+82     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 420:	81 11       	cpse	r24, r1
 422:	03 c0       	rjmp	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				}
				else if (ActiveIndicator == 0){
 424:	40 92 0f 02 	sts	0x020F, r4	; 0x80020f <ActiveIndicator>
					ActiveIndicator = 1;
 428:	24 c0       	rjmp	.+72     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	11 f5       	brne	.+68     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
				}
				else if (ActiveIndicator == 1){
 42e:	20 92 0f 02 	sts	0x020F, r2	; 0x80020f <ActiveIndicator>
					ActiveIndicator = 2;
 432:	1f c0       	rjmp	.+62     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	99 f4       	brne	.+38     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				}
			}
			
			if (BTN==2){
 438:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <start_stop>
				if (start_stop == 0){
 43c:	81 11       	cpse	r24, r1
 43e:	2b c1       	rjmp	.+598    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 440:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Frequency>
					MCU_to_FPGA(Shape,Amplitude,Frequency); //start generator
 444:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <Amplitude>
 448:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
 44c:	0d d2       	rcall	.+1050   	; 0x868 <MCU_to_FPGA>
 44e:	40 92 0b 02 	sts	0x020B, r4	; 0x80020b <start_stop>
					start_stop = 1;
 452:	40 e0       	ldi	r20, 0x00	; 0
				}
				if (start_stop == 1){
					MCU_to_FPGA(0,0,0); //stop generator
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	07 d2       	rcall	.+1038   	; 0x868 <MCU_to_FPGA>
 45a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <start_stop>
					start_stop = 0;
 45e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <BTN>
				}
			}

			if (BTN==3){
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	31 f4       	brne	.+12     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 466:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <Shape>
				Shape = 0;
 46a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Amplitude>
				Amplitude = 0;
 46e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <Frequency>
				Frequency = 0;
 472:	85 e5       	ldi	r24, 0x55	; 85
 474:	88 83       	st	Y, r24
			}
			
			data_return[0] = 0x55; //sync
 476:	8a ea       	ldi	r24, 0xAA	; 170
 478:	89 83       	std	Y+1, r24	; 0x01
			data_return[1] = 0xAA; //sync
 47a:	1a 82       	std	Y+2, r1	; 0x02
 47c:	8b e0       	ldi	r24, 0x0B	; 11
			data_return[2] = 0x00; //length
 47e:	8b 83       	std	Y+3, r24	; 0x03
			data_return[3] = 0x0b; //length
 480:	4c 82       	std	Y+4, r4	; 0x04
 482:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ActiveIndicator>
			data_return[4] = 0x01; //type
			data_return[5] = ActiveIndicator; // indicator
 486:	8d 83       	std	Y+5, r24	; 0x05
 488:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
			data_return[6] = Shape; // shape
 48c:	8e 83       	std	Y+6, r24	; 0x06
 48e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Amplitude>
			data_return[7] = Amplitude; // amplitude
 492:	8f 83       	std	Y+7, r24	; 0x07
 494:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Frequency>
			data_return[8] = Frequency; // frequency
 498:	88 87       	std	Y+8, r24	; 0x08
 49a:	19 86       	std	Y+9, r1	; 0x09
			data_return[9] = 0x00; //checksum
 49c:	1a 86       	std	Y+10, r1	; 0x0a
			data_return[10] = 0x00; //checksum
 49e:	6a e0       	ldi	r22, 0x0A	; 10
			
			putsUSART1(data_return,10);
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	ce 01       	movw	r24, r28
 4a4:	b5 d2       	rcall	.+1386   	; 0xa10 <putsUSART1>
 4a6:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <type>
			type = 0; // Reset type, s? knapper kun registreres 1 gang
 4aa:	7f cf       	rjmp	.-258    	; 0x3aa <main+0x70>
 4ac:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <flagUART>
			case 0:
			break;
			
			case 2:

			if (flagUART == 0){
 4b0:	81 11       	cpse	r24, r1
 4b2:	66 c0       	rjmp	.+204    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 4b4:	f7 01       	movw	r30, r14
 4b6:	85 81       	ldd	r24, Z+5	; 0x05
				sample_rate = data_buffer[5];
 4b8:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <sample_rate>
 4bc:	86 81       	ldd	r24, Z+6	; 0x06
 4be:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <sample_rate2>
				sample_rate2 = data_buffer[6];
 4c2:	20 91 06 0b 	lds	r18, 0x0B06	; 0x800b06 <sample_rate>
				sample_rate3 = (sample_rate<<8)|sample_rate2;
 4c6:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <sample_rate2>
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	92 2b       	or	r25, r18
 4ce:	90 93 05 10 	sts	0x1005, r25	; 0x801005 <sample_rate3+0x1>
 4d2:	80 93 04 10 	sts	0x1004, r24	; 0x801004 <sample_rate3>
 4d6:	87 81       	ldd	r24, Z+7	; 0x07
 4d8:	90 e0       	ldi	r25, 0x00	; 0
				
				record_length = data_buffer[7];
 4da:	90 93 02 0f 	sts	0x0F02, r25	; 0x800f02 <record_length+0x1>
 4de:	80 93 01 0f 	sts	0x0F01, r24	; 0x800f01 <record_length>
 4e2:	80 85       	ldd	r24, Z+8	; 0x08
 4e4:	90 e0       	ldi	r25, 0x00	; 0
				record_length2 = data_buffer[8];
 4e6:	90 93 04 0f 	sts	0x0F04, r25	; 0x800f04 <record_length2+0x1>
 4ea:	80 93 03 0f 	sts	0x0F03, r24	; 0x800f03 <record_length2>
 4ee:	80 91 01 0f 	lds	r24, 0x0F01	; 0x800f01 <record_length>
				record_length3 = (record_length<<8)|record_length2;
 4f2:	90 91 02 0f 	lds	r25, 0x0F02	; 0x800f02 <record_length+0x1>
 4f6:	20 91 03 0f 	lds	r18, 0x0F03	; 0x800f03 <record_length2>
 4fa:	30 91 04 0f 	lds	r19, 0x0F04	; 0x800f04 <record_length2+0x1>
 4fe:	98 2f       	mov	r25, r24
 500:	88 27       	eor	r24, r24
 502:	82 2b       	or	r24, r18
 504:	93 2b       	or	r25, r19
 506:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <record_length3+0x1>
 50a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <record_length3>
 50e:	20 91 04 10 	lds	r18, 0x1004	; 0x801004 <sample_rate3>
				int record_length_min = -1 * ((7 * sample_rate3)/(-11520 + sample_rate3));
 512:	30 91 05 10 	lds	r19, 0x1005	; 0x801005 <sample_rate3+0x1>
 516:	60 91 04 10 	lds	r22, 0x1004	; 0x801004 <sample_rate3>
 51a:	70 91 05 10 	lds	r23, 0x1005	; 0x801005 <sample_rate3+0x1>
 51e:	c9 01       	movw	r24, r18
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	82 1b       	sub	r24, r18
 52e:	93 0b       	sbc	r25, r19
 530:	7d 52       	subi	r23, 0x2D	; 45
 532:	89 d2       	rcall	.+1298   	; 0xa46 <__divmodhi4>
 534:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
				if(record_length3 < record_length_min){
 538:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 53c:	22 27       	eor	r18, r18
 53e:	33 27       	eor	r19, r19
 540:	26 1b       	sub	r18, r22
 542:	37 0b       	sbc	r19, r23
 544:	82 17       	cp	r24, r18
 546:	93 07       	cpc	r25, r19
 548:	3c f4       	brge	.+14     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 54a:	c5 01       	movw	r24, r10
 54c:	86 1b       	sub	r24, r22
					record_length3 = record_length_min + 1;
 54e:	97 0b       	sbc	r25, r23
 550:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <record_length3+0x1>
 554:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <record_length3>
 558:	20 91 04 10 	lds	r18, 0x1004	; 0x801004 <sample_rate3>
				}
				
				//init_timer1(sample_rate3);
				OCR1A = (250000/sample_rate3)-1;
 55c:	30 91 05 10 	lds	r19, 0x1005	; 0x801005 <sample_rate3+0x1>
 560:	03 2e       	mov	r0, r19
 562:	00 0c       	add	r0, r0
 564:	44 0b       	sbc	r20, r20
 566:	55 0b       	sbc	r21, r21
 568:	60 e9       	ldi	r22, 0x90	; 144
 56a:	70 ed       	ldi	r23, 0xD0	; 208
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	7d d2       	rcall	.+1274   	; 0xa6c <__divmodsi4>
 572:	21 50       	subi	r18, 0x01	; 1
 574:	31 09       	sbc	r19, r1
 576:	f6 01       	movw	r30, r12
 578:	31 83       	std	Z+1, r19	; 0x01
 57a:	20 83       	st	Z, r18
 57c:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <flagUART>
				flagUART = 1;
 580:	80 91 0c 0b 	lds	r24, 0x0B0C	; 0x800b0c <flagADC>
			}
			//if(record_length3 > 0){
			if (flagADC == 1){
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	09 f0       	breq	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 588:	10 cf       	rjmp	.-480    	; 0x3aa <main+0x70>
 58a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <sample_flag>
				if(sample_flag == 1){
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	51 f4       	brne	.+20     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 592:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <adc_send_done>
					if(adc_send_done == 1){
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	99 f4       	brne	.+38     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 59a:	89 e1       	ldi	r24, 0x19	; 25
						adc_packet_send(adc_buffer2);
 59c:	9b e0       	ldi	r25, 0x0B	; 11
 59e:	5c de       	rcall	.-840    	; 0x258 <adc_packet_send>
 5a0:	20 92 02 02 	sts	0x0202, r2	; 0x800202 <adc_send_done>
						adc_send_done = 2;
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5a6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <sample_flag>
					}	
					}
				else if(sample_flag == 0){
 5aa:	81 11       	cpse	r24, r1
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5ae:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <adc_send_done>
					if(adc_send_done == 2){
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	29 f4       	brne	.+10     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b6:	8c e1       	ldi	r24, 0x1C	; 28
						adc_packet_send(adc_buffer1);
 5b8:	93 e0       	ldi	r25, 0x03	; 3
 5ba:	4e de       	rcall	.-868    	; 0x258 <adc_packet_send>
 5bc:	40 92 02 02 	sts	0x0202, r4	; 0x800202 <adc_send_done>
						adc_send_done = 1;	
 5c0:	10 92 0c 0b 	sts	0x0B0C, r1	; 0x800b0c <flagADC>
					}
				}
				flagADC = 0;
 5c4:	f2 ce       	rjmp	.-540    	; 0x3aa <main+0x70>
 5c6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <flagUART>
			
			
			break;
		
			case 3:
			if(flagUART == 0){
 5ca:	81 11       	cpse	r24, r1
 5cc:	ee ce       	rjmp	.-548    	; 0x3aa <main+0x70>
 5ce:	f6 01       	movw	r30, r12
 5d0:	91 82       	std	Z+1, r9	; 0x01
				OCR1A = 24; // sample rate 10000 sps
 5d2:	80 82       	st	Z, r8
 5d4:	30 92 0e 02 	sts	0x020E, r3	; 0x80020e <Shape>
				Shape = 3; //sinus
 5d8:	50 92 0d 02 	sts	0x020D, r5	; 0x80020d <Amplitude>
				Amplitude = 0xff; //3,3V
 5dc:	85 e5       	ldi	r24, 0x55	; 85
 5de:	f8 01       	movw	r30, r16
				
					Bodeplot_Send[0] = 0x55;
 5e0:	80 83       	st	Z, r24
 5e2:	8a ea       	ldi	r24, 0xAA	; 170
 5e4:	81 83       	std	Z+1, r24	; 0x01
					Bodeplot_Send[1] = 0xAA;
 5e6:	42 82       	std	Z+2, r4	; 0x02
					Bodeplot_Send[2] = 0x01;
 5e8:	86 e0       	ldi	r24, 0x06	; 6
					Bodeplot_Send[3] = 0x06;
 5ea:	83 83       	std	Z+3, r24	; 0x03
 5ec:	34 82       	std	Z+4, r3	; 0x04
					Bodeplot_Send[4] = 0x03;
 5ee:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <j>
				
				for(j=0; j<255; j++){
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	41 50       	subi	r20, 0x01	; 1
					Frequency = (j-1);
 5f6:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <Frequency>
 5fa:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <Amplitude>

					MCU_to_FPGA(Shape,Amplitude,Frequency);
 5fe:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
 602:	32 d1       	rcall	.+612    	; 0x868 <MCU_to_FPGA>
 604:	50 92 09 0b 	sts	0x0B09, r5	; 0x800b09 <Amplitude_min>

					Amplitude_min = 0xff; // sikre at sample er mindre første gang
 608:	10 92 0a 0b 	sts	0x0B0A, r1	; 0x800b0a <Amplitude_max>
					Amplitude_max = 0x00; // sikre at sample er større første gang
 60c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <x+0x1>

					for(x=0; x<=1000; x++){
 610:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <x>
 614:	45 2d       	mov	r20, r5
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SampleReady>
						if (SampleReady == 1){
 620:	21 30       	cpi	r18, 0x01	; 1
 622:	79 f4       	brne	.+30     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 624:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <SampleReady>
							SampleReady = 0;
 628:	20 91 12 10 	lds	r18, 0x1012	; 0x801012 <Sample>
							if (Sample < Amplitude_min){
 62c:	24 17       	cp	r18, r20
 62e:	10 f4       	brcc	.+4      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 630:	40 91 12 10 	lds	r20, 0x1012	; 0x801012 <Sample>
								Amplitude_min = Sample;
 634:	20 91 12 10 	lds	r18, 0x1012	; 0x801012 <Sample>
							}
							if (Sample > Amplitude_max){
 638:	32 17       	cp	r19, r18
 63a:	20 f4       	brcc	.+8      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 63c:	30 91 12 10 	lds	r19, 0x1012	; 0x801012 <Sample>
								Amplitude_max = Sample;
 640:	01 c0       	rjmp	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	01 96       	adiw	r24, 0x01	; 1
							}
						}
						else{
							x--;
 646:	89 3e       	cpi	r24, 0xE9	; 233
					MCU_to_FPGA(Shape,Amplitude,Frequency);

					Amplitude_min = 0xff; // sikre at sample er mindre første gang
					Amplitude_max = 0x00; // sikre at sample er større første gang

					for(x=0; x<=1000; x++){
 648:	f3 e0       	ldi	r31, 0x03	; 3
 64a:	9f 07       	cpc	r25, r31
 64c:	38 f3       	brcs	.-50     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 64e:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <x+0x1>
 652:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <x>
 656:	30 93 0a 0b 	sts	0x0B0A, r19	; 0x800b0a <Amplitude_max>
 65a:	40 93 09 0b 	sts	0x0B09, r20	; 0x800b09 <Amplitude_min>
 65e:	34 1b       	sub	r19, r20
 660:	30 93 0b 0b 	sts	0x0B0B, r19	; 0x800b0b <Amplitude_Bodeplot>
						else{
							x--;
						}
					}

					Amplitude_Bodeplot = (Amplitude_max - Amplitude_min);
 664:	40 91 19 03 	lds	r20, 0x0319	; 0x800319 <j>
					Bodeplot_Send[j+5] = Amplitude_Bodeplot;
 668:	e4 2f       	mov	r30, r20
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	ed 5e       	subi	r30, 0xED	; 237
 66e:	fd 4f       	sbci	r31, 0xFD	; 253
 670:	35 83       	std	Z+5, r19	; 0x05
 672:	4f 5f       	subi	r20, 0xFF	; 255
					Bodeplot_Send[1] = 0xAA;
					Bodeplot_Send[2] = 0x01;
					Bodeplot_Send[3] = 0x06;
					Bodeplot_Send[4] = 0x03;
				
				for(j=0; j<255; j++){
 674:	40 93 19 03 	sts	0x0319, r20	; 0x800319 <j>
 678:	4f 3f       	cpi	r20, 0xFF	; 255
 67a:	09 f0       	breq	.+2      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 67c:	bb cf       	rjmp	.-138    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 67e:	f3 01       	movw	r30, r6

					Amplitude_Bodeplot = (Amplitude_max - Amplitude_min);
					Bodeplot_Send[j+5] = Amplitude_Bodeplot;
				}
			
				Bodeplot_Send[260] = 0x00;
 680:	10 82       	st	Z, r1
 682:	e8 e1       	ldi	r30, 0x18	; 24
				Bodeplot_Send[261] = 0x00;
 684:	f3 e0       	ldi	r31, 0x03	; 3
 686:	10 82       	st	Z, r1
 688:	65 e0       	ldi	r22, 0x05	; 5

				putsUSART1(Bodeplot_Send, 261);
 68a:	71 e0       	ldi	r23, 0x01	; 1
 68c:	c8 01       	movw	r24, r16
 68e:	c0 d1       	rcall	.+896    	; 0xa10 <putsUSART1>
 690:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <flagUART>
				flagUART = 1;
 694:	8a ce       	rjmp	.-748    	; 0x3aa <main+0x70>
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	09 f0       	breq	.+2      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
			if (BTN==2){
				if (start_stop == 0){
					MCU_to_FPGA(Shape,Amplitude,Frequency); //start generator
					start_stop = 1;
				}
				if (start_stop == 1){
 69a:	eb ce       	rjmp	.-554    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 69c:	da ce       	rjmp	.-588    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

0000069e <__vector_17>:
 69e:	1f 92       	push	r1
 6a0:	0f 92       	push	r0
			}
		}
	}


ISR(TIMER1_COMPA_vect){
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	0f 92       	push	r0
 6a6:	11 24       	eor	r1, r1
 6a8:	0b b6       	in	r0, 0x3b	; 59
 6aa:	0f 92       	push	r0
 6ac:	8f 93       	push	r24
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 6b2:	ea e7       	ldi	r30, 0x7A	; 122
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	80 64       	ori	r24, 0x40	; 64
 6ba:	80 83       	st	Z, r24
	
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	8f 91       	pop	r24
 6c2:	0f 90       	pop	r0
 6c4:	0b be       	out	0x3b, r0	; 59
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_29>:

ISR(ADC_vect){
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	0b b6       	in	r0, 0x3b	; 59
 6dc:	0f 92       	push	r0
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	8f 93       	push	r24
 6e4:	9f 93       	push	r25
 6e6:	ef 93       	push	r30
 6e8:	ff 93       	push	r31
	static int i = 0;
	Sample = ADCH;
 6ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 6ee:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <Sample>
	SampleReady = 1;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <SampleReady>
	if(sample_flag == 1){
 6f8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <sample_flag>
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	11 f5       	brne	.+68     	; 0x744 <__vector_29+0x74>
		adc_buffer1[i] = ADCH;
 700:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <i.2559>
 704:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <i.2559+0x1>
 708:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 70c:	fc 01       	movw	r30, r24
 70e:	e4 5e       	subi	r30, 0xE4	; 228
 710:	fc 4f       	sbci	r31, 0xFC	; 252
 712:	20 83       	st	Z, r18
		i++;
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <i.2559+0x1>
 71a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <i.2559>
		//	adc_buffer1[250] = 0xff;
		if(i > record_length3-1){
 71e:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <record_length3>
 722:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <record_length3+0x1>
 726:	21 50       	subi	r18, 0x01	; 1
 728:	31 09       	sbc	r19, r1
 72a:	28 17       	cp	r18, r24
 72c:	39 07       	cpc	r19, r25
 72e:	5c f5       	brge	.+86     	; 0x786 <__vector_29+0xb6>
			i = 0;
 730:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <i.2559+0x1>
 734:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <i.2559>
			sample_flag = 0;
 738:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <sample_flag>
			flagADC = 1;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <flagADC>
 742:	21 c0       	rjmp	.+66     	; 0x786 <__vector_29+0xb6>
		}
	}
	else{
		adc_buffer2[i] = ADCH;
 744:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <i.2559>
 748:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <i.2559+0x1>
 74c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 750:	fc 01       	movw	r30, r24
 752:	e7 5e       	subi	r30, 0xE7	; 231
 754:	f4 4f       	sbci	r31, 0xF4	; 244
 756:	20 83       	st	Z, r18
		i++;
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <i.2559+0x1>
 75e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <i.2559>
		//adc_buffer2[250] = 0x00;
		if(i > record_length3-1){
 762:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <record_length3>
 766:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <record_length3+0x1>
 76a:	21 50       	subi	r18, 0x01	; 1
 76c:	31 09       	sbc	r19, r1
 76e:	28 17       	cp	r18, r24
 770:	39 07       	cpc	r19, r25
 772:	4c f4       	brge	.+18     	; 0x786 <__vector_29+0xb6>
			i = 0;
 774:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <i.2559+0x1>
 778:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <i.2559>
			sample_flag = 1;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <sample_flag>
			flagADC = 1;
 782:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <flagADC>
		}
	}
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	3f 91       	pop	r19
 790:	2f 91       	pop	r18
 792:	0f 90       	pop	r0
 794:	0b be       	out	0x3b, r0	; 59
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_36>:

ISR(USART1_RX_vect){
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	0b b6       	in	r0, 0x3b	; 59
 7ac:	0f 92       	push	r0
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	ef 93       	push	r30
 7b8:	ff 93       	push	r31
	static int i;
	static int max_len = 11;
	data_buffer[i] = UDR1;
 7ba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 7be:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 7c2:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 7c6:	fc 01       	movw	r30, r24
 7c8:	e9 5f       	subi	r30, 0xF9	; 249
 7ca:	ff 4e       	sbci	r31, 0xEF	; 239
 7cc:	20 83       	st	Z, r18
	i++;
 7ce:	01 96       	adiw	r24, 0x01	; 1
 7d0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 7d4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
	if(data_buffer[4] == 1){
 7d8:	20 91 0b 10 	lds	r18, 0x100B	; 0x80100b <data_buffer+0x4>
 7dc:	21 30       	cpi	r18, 0x01	; 1
 7de:	41 f4       	brne	.+16     	; 0x7f0 <__vector_36+0x50>
		type = 1;
 7e0:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <type>
		max_len = 9;
 7e4:	29 e0       	ldi	r18, 0x09	; 9
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 7ec:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(data_buffer[4] == 2){
 7f0:	20 91 0b 10 	lds	r18, 0x100B	; 0x80100b <data_buffer+0x4>
 7f4:	22 30       	cpi	r18, 0x02	; 2
 7f6:	41 f4       	brne	.+16     	; 0x808 <__vector_36+0x68>
		type = 2;
 7f8:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <type>
		max_len = 11;
 7fc:	2b e0       	ldi	r18, 0x0B	; 11
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 804:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(data_buffer[4] == 3){
 808:	20 91 0b 10 	lds	r18, 0x100B	; 0x80100b <data_buffer+0x4>
 80c:	23 30       	cpi	r18, 0x03	; 3
 80e:	41 f4       	brne	.+16     	; 0x820 <__vector_36+0x80>
		type = 3;
 810:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <type>
		max_len = 7;
 814:	27 e0       	ldi	r18, 0x07	; 7
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 81c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(i == max_len){
 820:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 824:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 828:	82 17       	cp	r24, r18
 82a:	93 07       	cpc	r25, r19
 82c:	31 f4       	brne	.+12     	; 0x83a <__vector_36+0x9a>
		i = 0;
 82e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 832:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
		flagUART = 0;
 836:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <flagUART>
	}

 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	3f 91       	pop	r19
 844:	2f 91       	pop	r18
 846:	0f 90       	pop	r0
 848:	0b be       	out	0x3b, r0	; 59
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <SPI_MasterInit>:
// #include <stdio.h>
// #include "uart.h"

void SPI_MasterInit(){

	DDRB |=(1<<DDB2)|(1<< DDB1)|(1<<DDB0);			//MOSI, SCK, !SS outputs!
 854:	84 b1       	in	r24, 0x04	; 4
 856:	87 60       	ori	r24, 0x07	; 7
 858:	84 b9       	out	0x04, r24	; 4
	SPCR |=(1<<SPE)|(1<<MSTR);						//spi_enable, master
 85a:	8c b5       	in	r24, 0x2c	; 44
 85c:	80 65       	ori	r24, 0x50	; 80
 85e:	8c bd       	out	0x2c, r24	; 44
	SPCR |=(1<<SPI2X)|(1<<SPR1);					//clk frequency fosc/32
 860:	8c b5       	in	r24, 0x2c	; 44
 862:	83 60       	ori	r24, 0x03	; 3
 864:	8c bd       	out	0x2c, r24	; 44
 866:	08 95       	ret

00000868 <MCU_to_FPGA>:
	char MISO, MISO1;
	
	do{				//'do while' in case ChkSum is the same
		

		ChkSum = SYNC ^ shape ^ ampl ^ freq;
 868:	7a e5       	ldi	r23, 0x5A	; 90
 86a:	54 2f       	mov	r21, r20
 86c:	57 27       	eor	r21, r23
 86e:	56 27       	eor	r21, r22
 870:	58 27       	eor	r21, r24
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
		SPDR  =   SYNC;											//Data Register is ready
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
		;
		MISO = SPDR;											//return data register
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 872:	21 e0       	ldi	r18, 0x01	; 1

		ChkSum = SYNC ^ shape ^ ampl ^ freq;
		
		
		//SYNC
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 874:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   SYNC;											//Data Register is ready
 876:	7e bd       	out	0x2e, r23	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 878:	0d b4       	in	r0, 0x2d	; 45
 87a:	07 fe       	sbrs	r0, 7
 87c:	fd cf       	rjmp	.-6      	; 0x878 <MCU_to_FPGA+0x10>
		;
		MISO = SPDR;											//return data register
 87e:	3e b5       	in	r19, 0x2e	; 46
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 880:	25 b9       	out	0x05, r18	; 5

		//Shape
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 882:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   shape;										//Data Register is ready
 884:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 886:	0d b4       	in	r0, 0x2d	; 45
 888:	07 fe       	sbrs	r0, 7
 88a:	fd cf       	rjmp	.-6      	; 0x886 <MCU_to_FPGA+0x1e>
		;
		MISO1 = SPDR;											//Get second half of data
 88c:	9e b5       	in	r25, 0x2e	; 46
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 88e:	25 b9       	out	0x05, r18	; 5

		//Ampl
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 890:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   ampl;											//Data Register is ready
 892:	6e bd       	out	0x2e, r22	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 894:	0d b4       	in	r0, 0x2d	; 45
 896:	07 fe       	sbrs	r0, 7
 898:	fd cf       	rjmp	.-6      	; 0x894 <MCU_to_FPGA+0x2c>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 89a:	25 b9       	out	0x05, r18	; 5

		//Freq
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 89c:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   freq;											//Data Register is ready
 89e:	4e bd       	out	0x2e, r20	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 8a0:	0d b4       	in	r0, 0x2d	; 45
 8a2:	07 fe       	sbrs	r0, 7
 8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <MCU_to_FPGA+0x38>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 8a6:	25 b9       	out	0x05, r18	; 5

		//ChkSum
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 8a8:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   ChkSum;										//Data Register is ready
 8aa:	5e bd       	out	0x2e, r21	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 8ac:	0d b4       	in	r0, 0x2d	; 45
 8ae:	07 fe       	sbrs	r0, 7
 8b0:	fd cf       	rjmp	.-6      	; 0x8ac <MCU_to_FPGA+0x44>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 8b2:	25 b9       	out	0x05, r18	; 5


		MISO =  (MISO << 1) | (MISO1 >> 7);						// the MISO signal is shifted one bit too far this compensates for that
 8b4:	33 0f       	add	r19, r19
 8b6:	99 1f       	adc	r25, r25
 8b8:	99 27       	eor	r25, r25
 8ba:	99 1f       	adc	r25, r25
 8bc:	93 2b       	or	r25, r19
		//til test
// 				char str[100] ={'\0'};
// 		 		sprintf(str, "sync [%x],  shape [%x],  ampl [%x],  freq [%x],  chksum [%x],   MISO [%x]",SYNC, shape, ampl, freq, ChkSum, MISO);
// 		 		putsUSART0(str,100);
// 		
	}while (MISO != ChkSum);
 8be:	59 13       	cpse	r21, r25
 8c0:	d9 cf       	rjmp	.-78     	; 0x874 <MCU_to_FPGA+0xc>
 8c2:	08 95       	ret

000008c4 <ssd1306_command>:
/** Used when doing Horizontal or Vertical Addressing*/
void setPageAddress()
{
	ssd1306_command(SSD1306_PAGEADDR); // 0x22 COMMAND
	ssd1306_command(0); // Start Page address
	ssd1306_command((SSD1306_LCDHEIGHT/8)-1);// End Page address
 8c4:	cf 93       	push	r28
 8c6:	c8 2f       	mov	r28, r24
 8c8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_i2c_address>
 8cc:	5f dc       	rcall	.-1858   	; 0x18c <I2C_Start>
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	83 dc       	rcall	.-1786   	; 0x1d8 <I2C_Write>
 8d2:	8c 2f       	mov	r24, r28
 8d4:	81 dc       	rcall	.-1790   	; 0x1d8 <I2C_Write>
 8d6:	97 dc       	rcall	.-1746   	; 0x206 <I2C_Stop>
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <InitializeDisplay>:
{
	


	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8dc:	8e ea       	ldi	r24, 0xAE	; 174
 8de:	f2 df       	rcall	.-28     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8e0:	85 ed       	ldi	r24, 0xD5	; 213
 8e2:	f0 df       	rcall	.-32     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x80);                 // the suggested ratio 0x80
 8e4:	80 e8       	ldi	r24, 0x80	; 128
 8e6:	ee df       	rcall	.-36     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8e8:	88 ea       	ldi	r24, 0xA8	; 168
 8ea:	ec df       	rcall	.-40     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x3F);
 8ec:	8f e3       	ldi	r24, 0x3F	; 63
 8ee:	ea df       	rcall	.-44     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8f0:	83 ed       	ldi	r24, 0xD3	; 211
 8f2:	e8 df       	rcall	.-48     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	e6 df       	rcall	.-52     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
 8f8:	80 e4       	ldi	r24, 0x40	; 64
 8fa:	e4 df       	rcall	.-56     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8fc:	8d e8       	ldi	r24, 0x8D	; 141
 8fe:	e2 df       	rcall	.-60     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x14);  // using internal VCC
 900:	84 e1       	ldi	r24, 0x14	; 20
 902:	e0 df       	rcall	.-64     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	de df       	rcall	.-68     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x00);                         // 0x00 horizontal addressing automatic line shift
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	dc df       	rcall	.-72     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
 90c:	81 ea       	ldi	r24, 0xA1	; 161
 90e:	da df       	rcall	.-76     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
 910:	88 ec       	ldi	r24, 0xC8	; 200
 912:	d8 df       	rcall	.-80     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 914:	8a ed       	ldi	r24, 0xDA	; 218
 916:	d6 df       	rcall	.-84     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x12);
 918:	82 e1       	ldi	r24, 0x12	; 18
 91a:	d4 df       	rcall	.-88     	; 0x8c4 <ssd1306_command>

	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 91c:	81 e8       	ldi	r24, 0x81	; 129
 91e:	d2 df       	rcall	.-92     	; 0x8c4 <ssd1306_command>
	ssd1306_command(0xCF);
 920:	8f ec       	ldi	r24, 0xCF	; 207
 922:	d0 df       	rcall	.-96     	; 0x8c4 <ssd1306_command>
 924:	89 ed       	ldi	r24, 0xD9	; 217

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 926:	ce df       	rcall	.-100    	; 0x8c4 <ssd1306_command>
 928:	81 ef       	ldi	r24, 0xF1	; 241
 92a:	cc df       	rcall	.-104    	; 0x8c4 <ssd1306_command>
	ssd1306_command(0xF1);
 92c:	8b ed       	ldi	r24, 0xDB	; 219
 92e:	ca df       	rcall	.-108    	; 0x8c4 <ssd1306_command>
 930:	80 e4       	ldi	r24, 0x40	; 64

	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 932:	c8 df       	rcall	.-112    	; 0x8c4 <ssd1306_command>
 934:	84 ea       	ldi	r24, 0xA4	; 164
 936:	c6 df       	rcall	.-116    	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x40);
 938:	86 ea       	ldi	r24, 0xA6	; 166
 93a:	c4 df       	rcall	.-120    	; 0x8c4 <ssd1306_command>
 93c:	8f ea       	ldi	r24, 0xAF	; 175

	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 93e:	c2 cf       	rjmp	.-124    	; 0x8c4 <ssd1306_command>
 940:	08 95       	ret

00000942 <displayOn>:
 942:	8f ea       	ldi	r24, 0xAF	; 175

	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 944:	bf cf       	rjmp	.-130    	; 0x8c4 <ssd1306_command>
 946:	08 95       	ret

00000948 <displayOff>:
 948:	8e ea       	ldi	r24, 0xAE	; 174

	ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
 94a:	bc cf       	rjmp	.-136    	; 0x8c4 <ssd1306_command>
 94c:	08 95       	ret

0000094e <SendChar>:
 94e:	cf 93       	push	r28
 950:	c8 2f       	mov	r28, r24
/** Actually this sends a byte, not a char to draw in the display.
* Displays chars uses 8 byte font the small ones and 96 bytes
* for the big number font.*/
void SendChar(unsigned char data)
{
	I2C_Start(_i2c_address); // begin transmitting
 952:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_i2c_address>
 956:	1a dc       	rcall	.-1996   	; 0x18c <I2C_Start>
	I2C_Write(0x40);//data mode
 958:	80 e4       	ldi	r24, 0x40	; 64
 95a:	3e dc       	rcall	.-1924   	; 0x1d8 <I2C_Write>
	I2C_Write(data);
 95c:	8c 2f       	mov	r24, r28
 95e:	3c dc       	rcall	.-1928   	; 0x1d8 <I2C_Write>
	I2C_Stop();    // stop transmitting
 960:	52 dc       	rcall	.-1884   	; 0x206 <I2C_Stop>
 962:	cf 91       	pop	r28
}
 964:	08 95       	ret

00000966 <setXY>:
 966:	cf 93       	push	r28
}

//==========================================================//
/** Set the cursor position in a 16 COL * 8 ROW map.*/
void setXY(unsigned char row,unsigned char col)
{
 968:	c6 2f       	mov	r28, r22
	ssd1306_command(0xb0+row);                //set page address    p. 31
 96a:	80 55       	subi	r24, 0x50	; 80
 96c:	ab df       	rcall	.-170    	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x00+(8*col&0x0f));       //set low col address   p. 30
 96e:	8c 2f       	mov	r24, r28
 970:	88 0f       	add	r24, r24
 972:	88 0f       	add	r24, r24
 974:	88 0f       	add	r24, r24
 976:	88 70       	andi	r24, 0x08	; 8
 978:	a5 df       	rcall	.-182    	; 0x8c4 <ssd1306_command>
	ssd1306_command(0x10+((8*col>>4)&0x0f));  //set high col address   p.30
 97a:	8c 2f       	mov	r24, r28
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	96 95       	lsr	r25
 980:	87 95       	ror	r24
 982:	8f 70       	andi	r24, 0x0F	; 15
 984:	80 5f       	subi	r24, 0xF0	; 240
 986:	9e df       	rcall	.-196    	; 0x8c4 <ssd1306_command>
}
 988:	cf 91       	pop	r28
 98a:	08 95       	ret

0000098c <clear_display>:
}

//==========================================================//
/** Clears the display by sending 0 to all the screen map.*/
void clear_display(void)
{
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
	unsigned char i,k;
	for(k=0;k<8;k++)
 990:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setXY(k,0);
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	8d 2f       	mov	r24, r29
 996:	e7 df       	rcall	.-50     	; 0x966 <setXY>
 998:	c0 e0       	ldi	r28, 0x00	; 0
		{
			for(i=0;i<128;i++)     //clear all COL
			{
				SendChar(0);         //clear all COL
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	d8 df       	rcall	.-80     	; 0x94e <SendChar>
	unsigned char i,k;
	for(k=0;k<8;k++)
	{
		setXY(k,0);
		{
			for(i=0;i<128;i++)     //clear all COL
 99e:	cf 5f       	subi	r28, 0xFF	; 255
 9a0:	c0 38       	cpi	r28, 0x80	; 128
 9a2:	d9 f7       	brne	.-10     	; 0x99a <clear_display+0xe>
//==========================================================//
/** Clears the display by sending 0 to all the screen map.*/
void clear_display(void)
{
	unsigned char i,k;
	for(k=0;k<8;k++)
 9a4:	df 5f       	subi	r29, 0xFF	; 255
 9a6:	d8 30       	cpi	r29, 0x08	; 8
 9a8:	a1 f7       	brne	.-24     	; 0x992 <clear_display+0x6>
				SendChar(0);         //clear all COL
				//delay(10);
			}
		}
	}
}
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

000009b0 <reset_display>:
}

/** reset the display*/
void reset_display(void)
{
	displayOff();
 9b0:	cb df       	rcall	.-106    	; 0x948 <displayOff>

	clear_display();
 9b2:	ec df       	rcall	.-40     	; 0x98c <clear_display>


	displayOn();
 9b4:	c6 cf       	rjmp	.-116    	; 0x942 <displayOn>
 9b6:	08 95       	ret

000009b8 <uart_Init>:
 9b8:	22 e0       	ldi	r18, 0x02	; 2
			ptr--;
		}
		else ptr++;
	}
	*ptr = '\0';
}
 9ba:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 9be:	e9 ec       	ldi	r30, 0xC9	; 201
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	20 81       	ld	r18, Z
 9c4:	28 69       	ori	r18, 0x98	; 152
 9c6:	20 83       	st	Z, r18
 9c8:	ea ec       	ldi	r30, 0xCA	; 202
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	20 81       	ld	r18, Z
 9ce:	26 60       	ori	r18, 0x06	; 6
 9d0:	20 83       	st	Z, r18
 9d2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 9d6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 9da:	08 95       	ret

000009dc <uart0_Init>:
 9dc:	22 e0       	ldi	r18, 0x02	; 2
 9de:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 9e2:	e1 ec       	ldi	r30, 0xC1	; 193
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	20 81       	ld	r18, Z
 9e8:	28 61       	ori	r18, 0x18	; 24
 9ea:	20 83       	st	Z, r18
 9ec:	e2 ec       	ldi	r30, 0xC2	; 194
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	20 81       	ld	r18, Z
 9f2:	26 60       	ori	r18, 0x06	; 6
 9f4:	20 83       	st	Z, r18
 9f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 9fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 9fe:	08 95       	ret

00000a00 <putchUSART1>:
 a00:	e8 ec       	ldi	r30, 0xC8	; 200
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	90 81       	ld	r25, Z
 a06:	95 ff       	sbrs	r25, 5
 a08:	fd cf       	rjmp	.-6      	; 0xa04 <putchUSART1+0x4>
 a0a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 a0e:	08 95       	ret

00000a10 <putsUSART1>:

void putsUSART1(char *ptr, int length){
 a10:	ef 92       	push	r14
 a12:	ff 92       	push	r15
 a14:	0f 93       	push	r16
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	8c 01       	movw	r16, r24
 a1e:	7b 01       	movw	r14, r22
	int i = 0;
	while((i <= length)){
 a20:	77 23       	and	r23, r23
 a22:	54 f0       	brlt	.+20     	; 0xa38 <putsUSART1+0x28>
 a24:	c0 e0       	ldi	r28, 0x00	; 0
 a26:	d0 e0       	ldi	r29, 0x00	; 0
		putchUSART1(*ptr);
 a28:	f8 01       	movw	r30, r16
 a2a:	81 91       	ld	r24, Z+
 a2c:	8f 01       	movw	r16, r30
 a2e:	e8 df       	rcall	.-48     	; 0xa00 <putchUSART1>
		ptr++;
		i++;
 a30:	21 96       	adiw	r28, 0x01	; 1
	*ptr = '\0';
}

void putsUSART1(char *ptr, int length){
	int i = 0;
	while((i <= length)){
 a32:	ec 16       	cp	r14, r28
 a34:	fd 06       	cpc	r15, r29
 a36:	c4 f7       	brge	.-16     	; 0xa28 <putsUSART1+0x18>
		putchUSART1(*ptr);
		ptr++;
		i++;
	}
}
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	ff 90       	pop	r15
 a42:	ef 90       	pop	r14
 a44:	08 95       	ret

00000a46 <__divmodhi4>:
 a46:	97 fb       	bst	r25, 7
 a48:	07 2e       	mov	r0, r23
 a4a:	16 f4       	brtc	.+4      	; 0xa50 <__divmodhi4+0xa>
 a4c:	00 94       	com	r0
 a4e:	06 d0       	rcall	.+12     	; 0xa5c <__divmodhi4_neg1>
 a50:	77 fd       	sbrc	r23, 7
 a52:	08 d0       	rcall	.+16     	; 0xa64 <__divmodhi4_neg2>
 a54:	27 d0       	rcall	.+78     	; 0xaa4 <__udivmodhi4>
 a56:	07 fc       	sbrc	r0, 7
 a58:	05 d0       	rcall	.+10     	; 0xa64 <__divmodhi4_neg2>
 a5a:	3e f4       	brtc	.+14     	; 0xa6a <__divmodhi4_exit>

00000a5c <__divmodhi4_neg1>:
 a5c:	90 95       	com	r25
 a5e:	81 95       	neg	r24
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	08 95       	ret

00000a64 <__divmodhi4_neg2>:
 a64:	70 95       	com	r23
 a66:	61 95       	neg	r22
 a68:	7f 4f       	sbci	r23, 0xFF	; 255

00000a6a <__divmodhi4_exit>:
 a6a:	08 95       	ret

00000a6c <__divmodsi4>:
 a6c:	05 2e       	mov	r0, r21
 a6e:	97 fb       	bst	r25, 7
 a70:	16 f4       	brtc	.+4      	; 0xa76 <__divmodsi4+0xa>
 a72:	00 94       	com	r0
 a74:	0f d0       	rcall	.+30     	; 0xa94 <__negsi2>
 a76:	57 fd       	sbrc	r21, 7
 a78:	05 d0       	rcall	.+10     	; 0xa84 <__divmodsi4_neg2>
 a7a:	28 d0       	rcall	.+80     	; 0xacc <__udivmodsi4>
 a7c:	07 fc       	sbrc	r0, 7
 a7e:	02 d0       	rcall	.+4      	; 0xa84 <__divmodsi4_neg2>
 a80:	46 f4       	brtc	.+16     	; 0xa92 <__divmodsi4_exit>
 a82:	08 c0       	rjmp	.+16     	; 0xa94 <__negsi2>

00000a84 <__divmodsi4_neg2>:
 a84:	50 95       	com	r21
 a86:	40 95       	com	r20
 a88:	30 95       	com	r19
 a8a:	21 95       	neg	r18
 a8c:	3f 4f       	sbci	r19, 0xFF	; 255
 a8e:	4f 4f       	sbci	r20, 0xFF	; 255
 a90:	5f 4f       	sbci	r21, 0xFF	; 255

00000a92 <__divmodsi4_exit>:
 a92:	08 95       	ret

00000a94 <__negsi2>:
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	08 95       	ret

00000aa4 <__udivmodhi4>:
 aa4:	aa 1b       	sub	r26, r26
 aa6:	bb 1b       	sub	r27, r27
 aa8:	51 e1       	ldi	r21, 0x11	; 17
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <__udivmodhi4_ep>

00000aac <__udivmodhi4_loop>:
 aac:	aa 1f       	adc	r26, r26
 aae:	bb 1f       	adc	r27, r27
 ab0:	a6 17       	cp	r26, r22
 ab2:	b7 07       	cpc	r27, r23
 ab4:	10 f0       	brcs	.+4      	; 0xaba <__udivmodhi4_ep>
 ab6:	a6 1b       	sub	r26, r22
 ab8:	b7 0b       	sbc	r27, r23

00000aba <__udivmodhi4_ep>:
 aba:	88 1f       	adc	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	5a 95       	dec	r21
 ac0:	a9 f7       	brne	.-22     	; 0xaac <__udivmodhi4_loop>
 ac2:	80 95       	com	r24
 ac4:	90 95       	com	r25
 ac6:	bc 01       	movw	r22, r24
 ac8:	cd 01       	movw	r24, r26
 aca:	08 95       	ret

00000acc <__udivmodsi4>:
 acc:	a1 e2       	ldi	r26, 0x21	; 33
 ace:	1a 2e       	mov	r1, r26
 ad0:	aa 1b       	sub	r26, r26
 ad2:	bb 1b       	sub	r27, r27
 ad4:	fd 01       	movw	r30, r26
 ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <__udivmodsi4_ep>

00000ad8 <__udivmodsi4_loop>:
 ad8:	aa 1f       	adc	r26, r26
 ada:	bb 1f       	adc	r27, r27
 adc:	ee 1f       	adc	r30, r30
 ade:	ff 1f       	adc	r31, r31
 ae0:	a2 17       	cp	r26, r18
 ae2:	b3 07       	cpc	r27, r19
 ae4:	e4 07       	cpc	r30, r20
 ae6:	f5 07       	cpc	r31, r21
 ae8:	20 f0       	brcs	.+8      	; 0xaf2 <__udivmodsi4_ep>
 aea:	a2 1b       	sub	r26, r18
 aec:	b3 0b       	sbc	r27, r19
 aee:	e4 0b       	sbc	r30, r20
 af0:	f5 0b       	sbc	r31, r21

00000af2 <__udivmodsi4_ep>:
 af2:	66 1f       	adc	r22, r22
 af4:	77 1f       	adc	r23, r23
 af6:	88 1f       	adc	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	1a 94       	dec	r1
 afc:	69 f7       	brne	.-38     	; 0xad8 <__udivmodsi4_loop>
 afe:	60 95       	com	r22
 b00:	70 95       	com	r23
 b02:	80 95       	com	r24
 b04:	90 95       	com	r25
 b06:	9b 01       	movw	r18, r22
 b08:	ac 01       	movw	r20, r24
 b0a:	bd 01       	movw	r22, r26
 b0c:	cf 01       	movw	r24, r30
 b0e:	08 95       	ret

00000b10 <_exit>:
 b10:	f8 94       	cli

00000b12 <__stop_program>:
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <__stop_program>
