
Osciloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000095e  000009f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a0d  00800206  00800206  000009f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f2  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef1  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4a  00000000  00000000  00003033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d4  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e9  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	cb c2       	rjmp	.+1430   	; 0x5dc <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	cc c2       	rjmp	.+1432   	; 0x60e <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	26 c3       	rjmp	.+1612   	; 0x6de <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e5       	ldi	r30, 0x5E	; 94
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2c e0       	ldi	r18, 0x0C	; 12
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 31       	cpi	r26, 0x13	; 19
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b0 d0       	rcall	.+352    	; 0x280 <main>
 120:	1c c4       	rjmp	.+2104   	; 0x95a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_adc>:
#include <avr/interrupt.h>
#define F_CPU 16000000UL

//Initialize adc
void init_adc(char ADC_channel){
		ADCSRA|=(1<<ADPS2)|(1<<ADEN)|(1<<ADIE); //1 MHz med 16 Prescale, ADC Enable, ADC Intertupt Enable
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	9c 68       	ori	r25, 0x8C	; 140
 12c:	90 83       	st	Z, r25
		
		
		//ADCSRB|=(1<<ADTS0)|(1<<ADTS2); //Auto-trigger = Timer1_Compare_Match_B
		
		
		ADMUX = ADC_channel;
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 83       	st	Z, r24
		ADMUX |= (1<<ADLAR); //ADC external Spændings Refference, Left shift resultat
 134:	90 81       	ld	r25, Z
 136:	90 62       	ori	r25, 0x20	; 32
 138:	90 83       	st	Z, r25
		DIDR0 = (1<<ADC_channel);
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	a9 01       	movw	r20, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <init_adc+0x22>
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <init_adc+0x1e>
 14a:	ee e7       	ldi	r30, 0x7E	; 126
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	40 83       	st	Z, r20
		DIDR0 =~DIDR0;
 150:	80 81       	ld	r24, Z
 152:	80 95       	com	r24
 154:	80 83       	st	Z, r24
		DIDR2 =0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 15c:	08 95       	ret

0000015e <init_timer1>:
unsigned char Amplitude_ref;
unsigned int x;
volatile char SampleReady = 0;

void init_timer1(unsigned int sps){
	TCCR1A = 0;
 15e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;
 162:	e1 e8       	ldi	r30, 0x81	; 129
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
	TCNT1 = 0;
 168:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 16c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B |=(1<<WGM12)|(1<<CS11)|(1<<CS10); //CTC mode
 170:	20 81       	ld	r18, Z
 172:	2b 60       	ori	r18, 0x0B	; 11
 174:	20 83       	st	Z, r18
	
	OCR1A = (250000/sps)-1; //=(16.000.000*(1/sps)-64)/64
 176:	9c 01       	movw	r18, r24
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	60 e9       	ldi	r22, 0x90	; 144
 17e:	70 ed       	ldi	r23, 0xD0	; 208
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	98 d3       	rcall	.+1840   	; 0x8b6 <__divmodsi4>
 186:	21 50       	subi	r18, 0x01	; 1
 188:	31 09       	sbc	r19, r1
 18a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 18e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	TIMSK1 |=(1<<OCIE1A); //interrupt when TCNNT1=OCR1A value
 192:	ef e6       	ldi	r30, 0x6F	; 111
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret

0000019e <adc_packet_send>:
}

void adc_packet_send(volatile char *ptr){
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	fc 01       	movw	r30, r24
		adc_send[j] = *ptr;
		ptr++;
		j++;
	}
	putsUSART1(adc_send, record_length3+6);
}
 1b0:	0d b7       	in	r16, 0x3d	; 61
 1b2:	1e b7       	in	r17, 0x3e	; 62
	TIMSK1 |=(1<<OCIE1A); //interrupt when TCNNT1=OCR1A value
}

void adc_packet_send(volatile char *ptr){
	int j = 5;
	char adc_send[record_length3 + 7];
 1b4:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 1b8:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 1bc:	07 96       	adiw	r24, 0x07	; 7
 1be:	2d b7       	in	r18, 0x3d	; 61
 1c0:	3e b7       	in	r19, 0x3e	; 62
 1c2:	28 1b       	sub	r18, r24
 1c4:	39 0b       	sbc	r19, r25
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	3e bf       	out	0x3e, r19	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	2d bf       	out	0x3d, r18	; 61
 1d0:	8d b7       	in	r24, 0x3d	; 61
 1d2:	9e b7       	in	r25, 0x3e	; 62
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	7c 01       	movw	r14, r24
	int totlen = record_length3+7;
 1d8:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 1dc:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 1e0:	07 96       	adiw	r24, 0x07	; 7
	char len2 = totlen;
	char len1 = (totlen >> 8);
	adc_send[0] = 0x55;
 1e2:	25 e5       	ldi	r18, 0x55	; 85
 1e4:	ad b7       	in	r26, 0x3d	; 61
 1e6:	be b7       	in	r27, 0x3e	; 62
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	2c 93       	st	X, r18
	adc_send[1] = 0xAA;
 1ec:	2a ea       	ldi	r18, 0xAA	; 170
 1ee:	d7 01       	movw	r26, r14
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	2c 93       	st	X, r18
 1f4:	11 97       	sbiw	r26, 0x01	; 1
	adc_send[2] = len1;
 1f6:	12 96       	adiw	r26, 0x02	; 2
 1f8:	9c 93       	st	X, r25
 1fa:	12 97       	sbiw	r26, 0x02	; 2
	adc_send[3] = len2;
 1fc:	13 96       	adiw	r26, 0x03	; 3
 1fe:	8c 93       	st	X, r24
 200:	13 97       	sbiw	r26, 0x03	; 3
	adc_send[4] = 0x02;
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	14 96       	adiw	r26, 0x04	; 4
 206:	8c 93       	st	X, r24
	char check = 0;
	adc_send[record_length3 + 5] = check;
 208:	a0 91 04 07 	lds	r26, 0x0704	; 0x800704 <record_length3>
 20c:	b0 91 05 07 	lds	r27, 0x0705	; 0x800705 <record_length3+0x1>
 210:	ae 0d       	add	r26, r14
 212:	bf 1d       	adc	r27, r15
 214:	15 96       	adiw	r26, 0x05	; 5
 216:	1c 92       	st	X, r1
	adc_send[record_length3 + 6] = check;
 218:	a0 91 04 07 	lds	r26, 0x0704	; 0x800704 <record_length3>
 21c:	b0 91 05 07 	lds	r27, 0x0705	; 0x800705 <record_length3+0x1>
 220:	ae 0d       	add	r26, r14
 222:	bf 1d       	adc	r27, r15
 224:	16 96       	adiw	r26, 0x06	; 6
 226:	1c 92       	st	X, r1
	
	while(j < record_length3+5){
 228:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 22c:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 230:	05 96       	adiw	r24, 0x05	; 5
 232:	06 97       	sbiw	r24, 0x06	; 6
 234:	8c f0       	brlt	.+34     	; 0x258 <adc_packet_send+0xba>
 236:	d7 01       	movw	r26, r14
 238:	15 96       	adiw	r26, 0x05	; 5
 23a:	45 e0       	ldi	r20, 0x05	; 5
 23c:	50 e0       	ldi	r21, 0x00	; 0
		adc_send[j] = *ptr;
 23e:	91 91       	ld	r25, Z+
 240:	9d 93       	st	X+, r25
		ptr++;
		j++;
 242:	4f 5f       	subi	r20, 0xFF	; 255
 244:	5f 4f       	sbci	r21, 0xFF	; 255
	adc_send[4] = 0x02;
	char check = 0;
	adc_send[record_length3 + 5] = check;
	adc_send[record_length3 + 6] = check;
	
	while(j < record_length3+5){
 246:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <record_length3>
 24a:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <record_length3+0x1>
 24e:	2b 5f       	subi	r18, 0xFB	; 251
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	42 17       	cp	r20, r18
 254:	53 07       	cpc	r21, r19
 256:	9c f3       	brlt	.-26     	; 0x23e <adc_packet_send+0xa0>
		adc_send[j] = *ptr;
		ptr++;
		j++;
	}
	putsUSART1(adc_send, record_length3+6);
 258:	60 91 04 07 	lds	r22, 0x0704	; 0x800704 <record_length3>
 25c:	70 91 05 07 	lds	r23, 0x0705	; 0x800705 <record_length3+0x1>
 260:	6a 5f       	subi	r22, 0xFA	; 250
 262:	7f 4f       	sbci	r23, 0xFF	; 255
 264:	c7 01       	movw	r24, r14
 266:	f9 d2       	rcall	.+1522   	; 0x85a <putsUSART1>
}
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	1e bf       	out	0x3e, r17	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0d bf       	out	0x3d, r16	; 61
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <main>:

int main(void)
{
	init_adc(0x00);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	50 df       	rcall	.-352    	; 0x124 <init_adc>
	uart_Init(16);
 284:	80 e1       	ldi	r24, 0x10	; 16
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	bc d2       	rcall	.+1400   	; 0x802 <uart_Init>
	uart0_Init(16);
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	90 e0       	ldi	r25, 0x00	; 0
	SPI_MasterInit();
 28e:	cb d2       	rcall	.+1430   	; 0x826 <uart0_Init>
	sei();
 290:	80 d2       	rcall	.+1280   	; 0x792 <SPI_MasterInit>
	init_timer1(100);
 292:	78 94       	sei
 294:	84 e6       	ldi	r24, 0x64	; 100
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	62 df       	rcall	.-316    	; 0x15e <init_timer1>
					}	
					}
				else if(sample_flag == 0){
					if(adc_send_done == 2){
						adc_packet_send(adc_buffer1);
						adc_send_done = 1;	
 29a:	44 24       	eor	r4, r4
 29c:	43 94       	inc	r4
			//if(record_length3 > 0){
			if (flagADC == 1){
				if(sample_flag == 1){
					if(adc_send_done == 1){
						adc_packet_send(adc_buffer2);
						adc_send_done = 2;
 29e:	68 94       	set
 2a0:	22 24       	eor	r2, r2
 2a2:	21 f8       	bld	r2, 1
			break;
			
			case 2:

			if (flagUART == 0){
				sample_rate = data_buffer[5];
 2a4:	0f 2e       	mov	r0, r31
 2a6:	f7 e0       	ldi	r31, 0x07	; 7
 2a8:	ef 2e       	mov	r14, r31
 2aa:	fc e0       	ldi	r31, 0x0C	; 12
 2ac:	ff 2e       	mov	r15, r31
 2ae:	f0 2d       	mov	r31, r0
				if(record_length3 < record_length_min){
					record_length3 = record_length_min + 1;
				}
				
				//init_timer1(sample_rate3);
				OCR1A = (250000/sample_rate3)-1;
 2b0:	0f 2e       	mov	r0, r31
 2b2:	f8 e8       	ldi	r31, 0x88	; 136
 2b4:	cf 2e       	mov	r12, r31
 2b6:	d1 2c       	mov	r13, r1
 2b8:	f0 2d       	mov	r31, r0
				record_length = data_buffer[7];
				record_length2 = data_buffer[8];
				record_length3 = (record_length<<8)|record_length2;
				int record_length_min = -1 * ((7 * sample_rate3)/(-11520 + sample_rate3));
				if(record_length3 < record_length_min){
					record_length3 = record_length_min + 1;
 2ba:	aa 24       	eor	r10, r10
 2bc:	a3 94       	inc	r10
 2be:	b1 2c       	mov	r11, r1
			
			break;
		
			case 3:
			if(flagUART == 0){
				OCR1A = 24; // sample rate 10000 sps
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f8 e1       	ldi	r31, 0x18	; 24
 2c4:	8f 2e       	mov	r8, r31
 2c6:	91 2c       	mov	r9, r1
 2c8:	f0 2d       	mov	r31, r0
				Shape = 3; //sinus
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f3 e0       	ldi	r31, 0x03	; 3
 2ce:	3f 2e       	mov	r3, r31
 2d0:	f0 2d       	mov	r31, r0
				Amplitude = 0xff; //3,3V
 2d2:	55 24       	eor	r5, r5
 2d4:	5a 94       	dec	r5
				
					Bodeplot_Send[0] = 0x55;
 2d6:	03 e1       	ldi	r16, 0x13	; 19
 2d8:	12 e0       	ldi	r17, 0x02	; 2

					Amplitude_Bodeplot = (Amplitude_max - Amplitude_min);
					Bodeplot_Send[j+6] = Amplitude_Bodeplot;
				}
			
				Bodeplot_Send[260] = 0x00;
 2da:	0f 2e       	mov	r0, r31
 2dc:	f7 e1       	ldi	r31, 0x17	; 23
 2de:	6f 2e       	mov	r6, r31
 2e0:	f3 e0       	ldi	r31, 0x03	; 3
 2e2:	7f 2e       	mov	r7, r31
 2e4:	f0 2d       	mov	r31, r0
				Shape = 0;
				Amplitude = 0;
				Frequency = 0;
			}
			
			data_return[0] = 0x55; //sync
 2e6:	cd e0       	ldi	r28, 0x0D	; 13
 2e8:	d7 e0       	ldi	r29, 0x07	; 7
	sei();
	init_timer1(100);

	while (1)
	{	
		switch(type){
 2ea:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <type>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0x74>
 2f2:	7c c0       	rjmp	.+248    	; 0x3ec <main+0x16c>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	09 f4       	brne	.+2      	; 0x2fa <main+0x7a>
 2f8:	06 c1       	rjmp	.+524    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	b1 f7       	brne	.-20     	; 0x2ea <main+0x6a>
			
			case 1:
			if(flagUART == 0){
 2fe:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <flagUART>
 302:	81 11       	cpse	r24, r1
 304:	f2 cf       	rjmp	.-28     	; 0x2ea <main+0x6a>
			flagUART = 1;
 306:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <flagUART>
		
			BTN = data_buffer[5];
 30a:	f7 01       	movw	r30, r14
 30c:	85 81       	ldd	r24, Z+5	; 0x05
 30e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <BTN>
			SW = data_buffer[6];
 312:	96 81       	ldd	r25, Z+6	; 0x06
 314:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <SW>
			
			if (BTN==0){
 318:	81 11       	cpse	r24, r1
 31a:	17 c0       	rjmp	.+46     	; 0x34a <main+0xca>
				if (ActiveIndicator == 0){
 31c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ActiveIndicator>
 320:	81 11       	cpse	r24, r1
 322:	03 c0       	rjmp	.+6      	; 0x32a <main+0xaa>
					Shape = SW;
 324:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <Shape>
 328:	09 c0       	rjmp	.+18     	; 0x33c <main+0xbc>
				}
				if (ActiveIndicator == 1){
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	19 f4       	brne	.+6      	; 0x334 <main+0xb4>
					Amplitude = SW;
 32e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <Amplitude>
 332:	04 c0       	rjmp	.+8      	; 0x33c <main+0xbc>
				}
				if (ActiveIndicator == 2){
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	11 f4       	brne	.+4      	; 0x33c <main+0xbc>
					Frequency = SW;
 338:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <Frequency>
				}
				
				MCU_to_FPGA(Shape,Amplitude,Frequency);
 33c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Frequency>
 340:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <Amplitude>
 344:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
 348:	2e d2       	rcall	.+1116   	; 0x7a6 <MCU_to_FPGA>
			}
			
			if (BTN==1){
 34a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <BTN>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	89 f4       	brne	.+34     	; 0x374 <main+0xf4>
				if (ActiveIndicator == 2){
 352:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ActiveIndicator>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	19 f4       	brne	.+6      	; 0x360 <main+0xe0>
					ActiveIndicator = 0;
 35a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <ActiveIndicator>
 35e:	29 c0       	rjmp	.+82     	; 0x3b2 <main+0x132>
				}
				else if (ActiveIndicator == 0){
 360:	81 11       	cpse	r24, r1
 362:	03 c0       	rjmp	.+6      	; 0x36a <main+0xea>
					ActiveIndicator = 1;
 364:	40 92 0f 02 	sts	0x020F, r4	; 0x80020f <ActiveIndicator>
 368:	24 c0       	rjmp	.+72     	; 0x3b2 <main+0x132>
				}
				else if (ActiveIndicator == 1){
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	11 f5       	brne	.+68     	; 0x3b2 <main+0x132>
					ActiveIndicator = 2;
 36e:	20 92 0f 02 	sts	0x020F, r2	; 0x80020f <ActiveIndicator>
 372:	1f c0       	rjmp	.+62     	; 0x3b2 <main+0x132>
				}
			}
			
			if (BTN==2){
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	99 f4       	brne	.+38     	; 0x39e <main+0x11e>
				if (start_stop == 0){
 378:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <start_stop>
 37c:	81 11       	cpse	r24, r1
 37e:	2a c1       	rjmp	.+596    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
					MCU_to_FPGA(Shape,Amplitude,Frequency); //start generator
 380:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <Frequency>
 384:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <Amplitude>
 388:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
					start_stop = 1;
 38c:	0c d2       	rcall	.+1048   	; 0x7a6 <MCU_to_FPGA>
 38e:	40 92 0b 02 	sts	0x020B, r4	; 0x80020b <start_stop>
				}
				if (start_stop == 1){
					MCU_to_FPGA(0,0,0); //stop generator
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	06 d2       	rcall	.+1036   	; 0x7a6 <MCU_to_FPGA>
					start_stop = 0;
 39a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <start_stop>
				}
			}

			if (BTN==3){
 39e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <BTN>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	31 f4       	brne	.+12     	; 0x3b2 <main+0x132>
				Shape = 0;
 3a6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <Shape>
				Amplitude = 0;
 3aa:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Amplitude>
				Frequency = 0;
 3ae:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <Frequency>
			}
			
			data_return[0] = 0x55; //sync
 3b2:	85 e5       	ldi	r24, 0x55	; 85
 3b4:	88 83       	st	Y, r24
			data_return[1] = 0xAA; //sync
 3b6:	8a ea       	ldi	r24, 0xAA	; 170
 3b8:	89 83       	std	Y+1, r24	; 0x01
			data_return[2] = 0x00; //length
 3ba:	1a 82       	std	Y+2, r1	; 0x02
			data_return[3] = 0x0b; //length
 3bc:	8b e0       	ldi	r24, 0x0B	; 11
 3be:	8b 83       	std	Y+3, r24	; 0x03
			data_return[4] = 0x01; //type
 3c0:	4c 82       	std	Y+4, r4	; 0x04
			data_return[5] = ActiveIndicator; // indicator
 3c2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ActiveIndicator>
 3c6:	8d 83       	std	Y+5, r24	; 0x05
			data_return[6] = Shape; // shape
 3c8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
 3cc:	8e 83       	std	Y+6, r24	; 0x06
			data_return[7] = Amplitude; // amplitude
 3ce:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <Amplitude>
 3d2:	8f 83       	std	Y+7, r24	; 0x07
			data_return[8] = Frequency; // frequency
 3d4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Frequency>
			data_return[9] = 0x00; //checksum
 3d8:	88 87       	std	Y+8, r24	; 0x08
			data_return[10] = 0x00; //checksum
 3da:	19 86       	std	Y+9, r1	; 0x09
			
			putsUSART1(data_return,10);
 3dc:	1a 86       	std	Y+10, r1	; 0x0a
 3de:	6a e0       	ldi	r22, 0x0A	; 10
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	ce 01       	movw	r24, r28
 3e4:	3a d2       	rcall	.+1140   	; 0x85a <putsUSART1>
			type = 0; // Reset type, s? knapper kun registreres 1 gang
 3e6:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <type>
 3ea:	7f cf       	rjmp	.-258    	; 0x2ea <main+0x6a>
			case 0:
			break;
			
			case 2:

			if (flagUART == 0){
 3ec:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <flagUART>
 3f0:	81 11       	cpse	r24, r1
 3f2:	66 c0       	rjmp	.+204    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
				sample_rate = data_buffer[5];
 3f4:	f7 01       	movw	r30, r14
 3f6:	85 81       	ldd	r24, Z+5	; 0x05
 3f8:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <sample_rate>
				sample_rate2 = data_buffer[6];
 3fc:	86 81       	ldd	r24, Z+6	; 0x06
 3fe:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <sample_rate2>
				sample_rate3 = (sample_rate<<8)|sample_rate2;
 402:	20 91 06 07 	lds	r18, 0x0706	; 0x800706 <sample_rate>
 406:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <sample_rate2>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	92 2b       	or	r25, r18
 40e:	90 93 05 0c 	sts	0x0C05, r25	; 0x800c05 <sample_rate3+0x1>
 412:	80 93 04 0c 	sts	0x0C04, r24	; 0x800c04 <sample_rate3>
				
				record_length = data_buffer[7];
 416:	87 81       	ldd	r24, Z+7	; 0x07
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <record_length+0x1>
 41e:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <record_length>
				record_length2 = data_buffer[8];
 422:	80 85       	ldd	r24, Z+8	; 0x08
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <record_length2+0x1>
 42a:	80 93 03 0b 	sts	0x0B03, r24	; 0x800b03 <record_length2>
				record_length3 = (record_length<<8)|record_length2;
 42e:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <record_length>
 432:	90 91 02 0b 	lds	r25, 0x0B02	; 0x800b02 <record_length+0x1>
 436:	20 91 03 0b 	lds	r18, 0x0B03	; 0x800b03 <record_length2>
 43a:	30 91 04 0b 	lds	r19, 0x0B04	; 0x800b04 <record_length2+0x1>
 43e:	98 2f       	mov	r25, r24
 440:	88 27       	eor	r24, r24
 442:	82 2b       	or	r24, r18
 444:	93 2b       	or	r25, r19
 446:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <record_length3+0x1>
 44a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <record_length3>
				int record_length_min = -1 * ((7 * sample_rate3)/(-11520 + sample_rate3));
 44e:	20 91 04 0c 	lds	r18, 0x0C04	; 0x800c04 <sample_rate3>
 452:	30 91 05 0c 	lds	r19, 0x0C05	; 0x800c05 <sample_rate3+0x1>
 456:	60 91 04 0c 	lds	r22, 0x0C04	; 0x800c04 <sample_rate3>
 45a:	70 91 05 0c 	lds	r23, 0x0C05	; 0x800c05 <sample_rate3+0x1>
 45e:	c9 01       	movw	r24, r18
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	82 1b       	sub	r24, r18
 46e:	93 0b       	sbc	r25, r19
 470:	7d 52       	subi	r23, 0x2D	; 45
 472:	0e d2       	rcall	.+1052   	; 0x890 <__divmodhi4>
				if(record_length3 < record_length_min){
 474:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <record_length3>
 478:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <record_length3+0x1>
 47c:	22 27       	eor	r18, r18
 47e:	33 27       	eor	r19, r19
 480:	26 1b       	sub	r18, r22
 482:	37 0b       	sbc	r19, r23
 484:	82 17       	cp	r24, r18
 486:	93 07       	cpc	r25, r19
 488:	3c f4       	brge	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
					record_length3 = record_length_min + 1;
 48a:	c5 01       	movw	r24, r10
 48c:	86 1b       	sub	r24, r22
 48e:	97 0b       	sbc	r25, r23
 490:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <record_length3+0x1>
 494:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <record_length3>
				}
				
				//init_timer1(sample_rate3);
				OCR1A = (250000/sample_rate3)-1;
 498:	20 91 04 0c 	lds	r18, 0x0C04	; 0x800c04 <sample_rate3>
 49c:	30 91 05 0c 	lds	r19, 0x0C05	; 0x800c05 <sample_rate3+0x1>
 4a0:	03 2e       	mov	r0, r19
 4a2:	00 0c       	add	r0, r0
 4a4:	44 0b       	sbc	r20, r20
 4a6:	55 0b       	sbc	r21, r21
 4a8:	60 e9       	ldi	r22, 0x90	; 144
 4aa:	70 ed       	ldi	r23, 0xD0	; 208
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 d2       	rcall	.+1028   	; 0x8b6 <__divmodsi4>
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	31 09       	sbc	r19, r1
 4b6:	f6 01       	movw	r30, r12
 4b8:	31 83       	std	Z+1, r19	; 0x01
 4ba:	20 83       	st	Z, r18
				flagUART = 1;
 4bc:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <flagUART>
			}
			//if(record_length3 > 0){
			if (flagADC == 1){
 4c0:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <flagADC>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	09 f0       	breq	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				if(sample_flag == 1){
 4c8:	10 cf       	rjmp	.-480    	; 0x2ea <main+0x6a>
 4ca:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <sample_flag>
 4ce:	81 30       	cpi	r24, 0x01	; 1
					if(adc_send_done == 1){
 4d0:	51 f4       	brne	.+20     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4d2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <adc_send_done>
 4d6:	81 30       	cpi	r24, 0x01	; 1
						adc_packet_send(adc_buffer2);
 4d8:	99 f4       	brne	.+38     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4da:	89 e1       	ldi	r24, 0x19	; 25
 4dc:	97 e0       	ldi	r25, 0x07	; 7
 4de:	5f de       	rcall	.-834    	; 0x19e <adc_packet_send>
						adc_send_done = 2;
 4e0:	20 92 02 02 	sts	0x0202, r2	; 0x800202 <adc_send_done>
					}	
					}
				else if(sample_flag == 0){
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4e6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <sample_flag>
 4ea:	81 11       	cpse	r24, r1
					if(adc_send_done == 2){
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4ee:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <adc_send_done>
 4f2:	82 30       	cpi	r24, 0x02	; 2
						adc_packet_send(adc_buffer1);
 4f4:	29 f4       	brne	.+10     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f6:	8c e1       	ldi	r24, 0x1C	; 28
 4f8:	93 e0       	ldi	r25, 0x03	; 3
 4fa:	51 de       	rcall	.-862    	; 0x19e <adc_packet_send>
						adc_send_done = 1;	
 4fc:	40 92 02 02 	sts	0x0202, r4	; 0x800202 <adc_send_done>
					}
				}
				flagADC = 0;
 500:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <flagADC>
 504:	f2 ce       	rjmp	.-540    	; 0x2ea <main+0x6a>
			
			
			break;
		
			case 3:
			if(flagUART == 0){
 506:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <flagUART>
 50a:	81 11       	cpse	r24, r1
 50c:	ee ce       	rjmp	.-548    	; 0x2ea <main+0x6a>
				OCR1A = 24; // sample rate 10000 sps
 50e:	f6 01       	movw	r30, r12
 510:	91 82       	std	Z+1, r9	; 0x01
 512:	80 82       	st	Z, r8
				Shape = 3; //sinus
 514:	30 92 0e 02 	sts	0x020E, r3	; 0x80020e <Shape>
				Amplitude = 0xff; //3,3V
 518:	50 92 0d 02 	sts	0x020D, r5	; 0x80020d <Amplitude>
				
					Bodeplot_Send[0] = 0x55;
 51c:	85 e5       	ldi	r24, 0x55	; 85
 51e:	f8 01       	movw	r30, r16
 520:	80 83       	st	Z, r24
					Bodeplot_Send[1] = 0xAA;
 522:	8a ea       	ldi	r24, 0xAA	; 170
 524:	81 83       	std	Z+1, r24	; 0x01
					Bodeplot_Send[2] = 0x01;
					Bodeplot_Send[3] = 0x06;
 526:	42 82       	std	Z+2, r4	; 0x02
 528:	86 e0       	ldi	r24, 0x06	; 6
					Bodeplot_Send[4] = 0x03;
 52a:	83 83       	std	Z+3, r24	; 0x03
				
				for(j=0; j<255; j++){
 52c:	34 82       	std	Z+4, r3	; 0x04
 52e:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <j>
					Frequency = (j);
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <Frequency>

					MCU_to_FPGA(Shape,Amplitude,Frequency);
 538:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <Amplitude>
 53c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Shape>
 540:	32 d1       	rcall	.+612    	; 0x7a6 <MCU_to_FPGA>

					Amplitude_min = 0xff; // sikre at sample er mindre første gang
 542:	50 92 09 07 	sts	0x0709, r5	; 0x800709 <Amplitude_min>
					Amplitude_max = 0x00; // sikre at sample er større første gang
 546:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <Amplitude_max>

					for(x=0; x<=10000; x++){
 54a:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <x+0x1>
 54e:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <x>
 552:	45 2d       	mov	r20, r5
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
						if (SampleReady == 1){
 55a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <SampleReady>
 55e:	21 30       	cpi	r18, 0x01	; 1
 560:	79 f4       	brne	.+30     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
							SampleReady = 0;
 562:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <SampleReady>
							if (Sample < Amplitude_min){
 566:	20 91 12 0c 	lds	r18, 0x0C12	; 0x800c12 <Sample>
 56a:	24 17       	cp	r18, r20
 56c:	10 f4       	brcc	.+4      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
								Amplitude_min = Sample;
 56e:	40 91 12 0c 	lds	r20, 0x0C12	; 0x800c12 <Sample>
							}
							if (Sample > Amplitude_max){
 572:	20 91 12 0c 	lds	r18, 0x0C12	; 0x800c12 <Sample>
 576:	32 17       	cp	r19, r18
 578:	20 f4       	brcc	.+8      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
								Amplitude_max = Sample;
 57a:	30 91 12 0c 	lds	r19, 0x0C12	; 0x800c12 <Sample>
 57e:	01 c0       	rjmp	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
							}
						}
						else{
							x--;
 580:	01 97       	sbiw	r24, 0x01	; 1
					MCU_to_FPGA(Shape,Amplitude,Frequency);

					Amplitude_min = 0xff; // sikre at sample er mindre første gang
					Amplitude_max = 0x00; // sikre at sample er større første gang

					for(x=0; x<=10000; x++){
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	81 31       	cpi	r24, 0x11	; 17
 586:	f7 e2       	ldi	r31, 0x27	; 39
 588:	9f 07       	cpc	r25, r31
 58a:	38 f3       	brcs	.-50     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 58c:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <x+0x1>
 590:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <x>
 594:	30 93 0a 07 	sts	0x070A, r19	; 0x80070a <Amplitude_max>
 598:	40 93 09 07 	sts	0x0709, r20	; 0x800709 <Amplitude_min>
						else{
							x--;
						}
					}

					Amplitude_Bodeplot = (Amplitude_max - Amplitude_min);
 59c:	34 1b       	sub	r19, r20
 59e:	30 93 0b 07 	sts	0x070B, r19	; 0x80070b <Amplitude_Bodeplot>
					Bodeplot_Send[j+6] = Amplitude_Bodeplot;
 5a2:	40 91 19 03 	lds	r20, 0x0319	; 0x800319 <j>
 5a6:	e4 2f       	mov	r30, r20
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ed 5e       	subi	r30, 0xED	; 237
 5ac:	fd 4f       	sbci	r31, 0xFD	; 253
 5ae:	36 83       	std	Z+6, r19	; 0x06
					Bodeplot_Send[1] = 0xAA;
					Bodeplot_Send[2] = 0x01;
					Bodeplot_Send[3] = 0x06;
					Bodeplot_Send[4] = 0x03;
				
				for(j=0; j<255; j++){
 5b0:	4f 5f       	subi	r20, 0xFF	; 255
 5b2:	40 93 19 03 	sts	0x0319, r20	; 0x800319 <j>
 5b6:	4f 3f       	cpi	r20, 0xFF	; 255
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>

					Amplitude_Bodeplot = (Amplitude_max - Amplitude_min);
					Bodeplot_Send[j+6] = Amplitude_Bodeplot;
				}
			
				Bodeplot_Send[260] = 0x00;
 5ba:	bc cf       	rjmp	.-136    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 5bc:	f3 01       	movw	r30, r6
				Bodeplot_Send[261] = 0x00;
 5be:	10 82       	st	Z, r1
 5c0:	e8 e1       	ldi	r30, 0x18	; 24
 5c2:	f3 e0       	ldi	r31, 0x03	; 3

				putsUSART1(Bodeplot_Send, 261);
 5c4:	10 82       	st	Z, r1
 5c6:	65 e0       	ldi	r22, 0x05	; 5
 5c8:	71 e0       	ldi	r23, 0x01	; 1
 5ca:	c8 01       	movw	r24, r16
 5cc:	46 d1       	rcall	.+652    	; 0x85a <putsUSART1>
				flagUART = 1;
 5ce:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <flagUART>
 5d2:	8b ce       	rjmp	.-746    	; 0x2ea <main+0x6a>
			if (BTN==2){
				if (start_stop == 0){
					MCU_to_FPGA(Shape,Amplitude,Frequency); //start generator
					start_stop = 1;
				}
				if (start_stop == 1){
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	09 f0       	breq	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d8:	ec ce       	rjmp	.-552    	; 0x3b2 <main+0x132>
 5da:	db ce       	rjmp	.-586    	; 0x392 <main+0x112>

000005dc <__vector_17>:
			}
		}
	}


ISR(TIMER1_COMPA_vect){
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	0b b6       	in	r0, 0x3b	; 59
 5e8:	0f 92       	push	r0
 5ea:	8f 93       	push	r24
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 5f0:	ea e7       	ldi	r30, 0x7A	; 122
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	80 64       	ori	r24, 0x40	; 64
 5f8:	80 83       	st	Z, r24
	
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	8f 91       	pop	r24
 600:	0f 90       	pop	r0
 602:	0b be       	out	0x3b, r0	; 59
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <__vector_29>:

ISR(ADC_vect){
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	0b b6       	in	r0, 0x3b	; 59
 61a:	0f 92       	push	r0
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
	static int i = 0;
	Sample = ADCH;
 628:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 62c:	80 93 12 0c 	sts	0x0C12, r24	; 0x800c12 <Sample>
	SampleReady = 1;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <SampleReady>
	if(sample_flag == 1){
 636:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <sample_flag>
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	11 f5       	brne	.+68     	; 0x682 <__vector_29+0x74>
		adc_buffer1[i] = ADCH;
 63e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <i.2479>
 642:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <i.2479+0x1>
 646:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 64a:	fc 01       	movw	r30, r24
 64c:	e4 5e       	subi	r30, 0xE4	; 228
 64e:	fc 4f       	sbci	r31, 0xFC	; 252
 650:	20 83       	st	Z, r18
		i++;
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <i.2479+0x1>
 658:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <i.2479>
		//	adc_buffer1[250] = 0xff;
		if(i > record_length3-1){
 65c:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <record_length3>
 660:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <record_length3+0x1>
 664:	21 50       	subi	r18, 0x01	; 1
 666:	31 09       	sbc	r19, r1
 668:	28 17       	cp	r18, r24
 66a:	39 07       	cpc	r19, r25
 66c:	5c f5       	brge	.+86     	; 0x6c4 <__vector_29+0xb6>
			i = 0;
 66e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <i.2479+0x1>
 672:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <i.2479>
			sample_flag = 0;
 676:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <sample_flag>
			flagADC = 1;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <flagADC>
 680:	21 c0       	rjmp	.+66     	; 0x6c4 <__vector_29+0xb6>
		}
	}
	else{
		adc_buffer2[i] = ADCH;
 682:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <i.2479>
 686:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <i.2479+0x1>
 68a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 68e:	fc 01       	movw	r30, r24
 690:	e7 5e       	subi	r30, 0xE7	; 231
 692:	f8 4f       	sbci	r31, 0xF8	; 248
 694:	20 83       	st	Z, r18
		i++;
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <i.2479+0x1>
 69c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <i.2479>
		//adc_buffer2[250] = 0x00;
		if(i > record_length3-1){
 6a0:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <record_length3>
 6a4:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <record_length3+0x1>
 6a8:	21 50       	subi	r18, 0x01	; 1
 6aa:	31 09       	sbc	r19, r1
 6ac:	28 17       	cp	r18, r24
 6ae:	39 07       	cpc	r19, r25
 6b0:	4c f4       	brge	.+18     	; 0x6c4 <__vector_29+0xb6>
			i = 0;
 6b2:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <i.2479+0x1>
 6b6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <i.2479>
			sample_flag = 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <sample_flag>
			flagADC = 1;
 6c0:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <flagADC>
		}
	}
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0b be       	out	0x3b, r0	; 59
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <__vector_36>:

ISR(USART1_RX_vect){
 6de:	1f 92       	push	r1
 6e0:	0f 92       	push	r0
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	0f 92       	push	r0
 6e6:	11 24       	eor	r1, r1
 6e8:	0b b6       	in	r0, 0x3b	; 59
 6ea:	0f 92       	push	r0
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	8f 93       	push	r24
 6f2:	9f 93       	push	r25
 6f4:	ef 93       	push	r30
 6f6:	ff 93       	push	r31
	static int i;
	static int max_len = 11;
	data_buffer[i] = UDR1;
 6f8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 6fc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 700:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 704:	fc 01       	movw	r30, r24
 706:	e9 5f       	subi	r30, 0xF9	; 249
 708:	f3 4f       	sbci	r31, 0xF3	; 243
 70a:	20 83       	st	Z, r18
	i++;
 70c:	01 96       	adiw	r24, 0x01	; 1
 70e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 712:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
	if(data_buffer[4] == 1){
 716:	20 91 0b 0c 	lds	r18, 0x0C0B	; 0x800c0b <data_buffer+0x4>
 71a:	21 30       	cpi	r18, 0x01	; 1
 71c:	41 f4       	brne	.+16     	; 0x72e <__vector_36+0x50>
		type = 1;
 71e:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <type>
		max_len = 9;
 722:	29 e0       	ldi	r18, 0x09	; 9
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 72a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(data_buffer[4] == 2){
 72e:	20 91 0b 0c 	lds	r18, 0x0C0B	; 0x800c0b <data_buffer+0x4>
 732:	22 30       	cpi	r18, 0x02	; 2
 734:	41 f4       	brne	.+16     	; 0x746 <__vector_36+0x68>
		type = 2;
 736:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <type>
		max_len = 11;
 73a:	2b e0       	ldi	r18, 0x0B	; 11
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 742:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(data_buffer[4] == 3){
 746:	20 91 0b 0c 	lds	r18, 0x0C0B	; 0x800c0b <data_buffer+0x4>
 74a:	23 30       	cpi	r18, 0x03	; 3
 74c:	41 f4       	brne	.+16     	; 0x75e <__vector_36+0x80>
		type = 3;
 74e:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <type>
		max_len = 7;
 752:	27 e0       	ldi	r18, 0x07	; 7
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 75a:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(i == max_len){
 75e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 762:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 766:	82 17       	cp	r24, r18
 768:	93 07       	cpc	r25, r19
 76a:	31 f4       	brne	.+12     	; 0x778 <__vector_36+0x9a>
		i = 0;
 76c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 770:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
		flagUART = 0;
 774:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <flagUART>
	}

 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	0f 90       	pop	r0
 786:	0b be       	out	0x3b, r0	; 59
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <SPI_MasterInit>:
// #include <stdio.h>
// #include "uart.h"

void SPI_MasterInit(){

	DDRB |=(1<<DDB2)|(1<< DDB1)|(1<<DDB0);			//MOSI, SCK, !SS outputs!
 792:	84 b1       	in	r24, 0x04	; 4
 794:	87 60       	ori	r24, 0x07	; 7
 796:	84 b9       	out	0x04, r24	; 4
	SPCR |=(1<<SPE)|(1<<MSTR);						//spi_enable, master
 798:	8c b5       	in	r24, 0x2c	; 44
 79a:	80 65       	ori	r24, 0x50	; 80
 79c:	8c bd       	out	0x2c, r24	; 44
	SPCR |=(1<<SPI2X)|(1<<SPR1);					//clk frequency fosc/32
 79e:	8c b5       	in	r24, 0x2c	; 44
 7a0:	83 60       	ori	r24, 0x03	; 3
 7a2:	8c bd       	out	0x2c, r24	; 44
 7a4:	08 95       	ret

000007a6 <MCU_to_FPGA>:
	char MISO, MISO1;
	
	do{				//'do while' in case ChkSum is the same
		

		ChkSum = SYNC ^ shape ^ ampl ^ freq;
 7a6:	7a e5       	ldi	r23, 0x5A	; 90
 7a8:	54 2f       	mov	r21, r20
 7aa:	57 27       	eor	r21, r23
 7ac:	56 27       	eor	r21, r22
 7ae:	58 27       	eor	r21, r24
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
		SPDR  =   SYNC;											//Data Register is ready
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
		;
		MISO = SPDR;											//return data register
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 7b0:	21 e0       	ldi	r18, 0x01	; 1

		ChkSum = SYNC ^ shape ^ ampl ^ freq;
		
		
		//SYNC
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 7b2:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   SYNC;											//Data Register is ready
 7b4:	7e bd       	out	0x2e, r23	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 7b6:	0d b4       	in	r0, 0x2d	; 45
 7b8:	07 fe       	sbrs	r0, 7
 7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <MCU_to_FPGA+0x10>
		;
		MISO = SPDR;											//return data register
 7bc:	3e b5       	in	r19, 0x2e	; 46
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 7be:	25 b9       	out	0x05, r18	; 5

		//Shape
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 7c0:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   shape;										//Data Register is ready
 7c2:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 7c4:	0d b4       	in	r0, 0x2d	; 45
 7c6:	07 fe       	sbrs	r0, 7
 7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <MCU_to_FPGA+0x1e>
		;
		MISO1 = SPDR;											//Get second half of data
 7ca:	9e b5       	in	r25, 0x2e	; 46
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 7cc:	25 b9       	out	0x05, r18	; 5

		//Ampl
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 7ce:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   ampl;											//Data Register is ready
 7d0:	6e bd       	out	0x2e, r22	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 7d2:	0d b4       	in	r0, 0x2d	; 45
 7d4:	07 fe       	sbrs	r0, 7
 7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <MCU_to_FPGA+0x2c>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 7d8:	25 b9       	out	0x05, r18	; 5

		//Freq
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 7da:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   freq;											//Data Register is ready
 7dc:	4e bd       	out	0x2e, r20	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 7de:	0d b4       	in	r0, 0x2d	; 45
 7e0:	07 fe       	sbrs	r0, 7
 7e2:	fd cf       	rjmp	.-6      	; 0x7de <MCU_to_FPGA+0x38>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 7e4:	25 b9       	out	0x05, r18	; 5

		//ChkSum
		PORTB &=~ (1<<PB0);										// set ss/cs to low (enable)
 7e6:	28 98       	cbi	0x05, 0	; 5
		SPDR  =   ChkSum;										//Data Register is ready
 7e8:	5e bd       	out	0x2e, r21	; 46
		while(!(SPSR & (1<<SPIF)))								//wait while receiving
 7ea:	0d b4       	in	r0, 0x2d	; 45
 7ec:	07 fe       	sbrs	r0, 7
 7ee:	fd cf       	rjmp	.-6      	; 0x7ea <MCU_to_FPGA+0x44>
		;
		PORTB  =  (1<<PB0);										//set ss/cs to High (disable)
 7f0:	25 b9       	out	0x05, r18	; 5


		MISO =  (MISO << 1) | (MISO1 >> 7);						// the MISO signal is shifted one bit too far this compensates for that
 7f2:	33 0f       	add	r19, r19
 7f4:	99 1f       	adc	r25, r25
 7f6:	99 27       	eor	r25, r25
 7f8:	99 1f       	adc	r25, r25
 7fa:	93 2b       	or	r25, r19
		//til test
// 				char str[100] ={'\0'};
// 		 		sprintf(str, "sync [%x],  shape [%x],  ampl [%x],  freq [%x],  chksum [%x],   MISO [%x]",SYNC, shape, ampl, freq, ChkSum, MISO);
// 		 		putsUSART0(str,100);
// 		
	}while (MISO != ChkSum);
 7fc:	59 13       	cpse	r21, r25
 7fe:	d9 cf       	rjmp	.-78     	; 0x7b2 <MCU_to_FPGA+0xc>
 800:	08 95       	ret

00000802 <uart_Init>:
			ptr--;
		}
		else ptr++;
	}
	*ptr = '\0';
}
 802:	22 e0       	ldi	r18, 0x02	; 2
 804:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 808:	e9 ec       	ldi	r30, 0xC9	; 201
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	20 81       	ld	r18, Z
 80e:	28 69       	ori	r18, 0x98	; 152
 810:	20 83       	st	Z, r18
 812:	ea ec       	ldi	r30, 0xCA	; 202
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	20 81       	ld	r18, Z
 818:	26 60       	ori	r18, 0x06	; 6
 81a:	20 83       	st	Z, r18
 81c:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 820:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 824:	08 95       	ret

00000826 <uart0_Init>:
 826:	22 e0       	ldi	r18, 0x02	; 2
 828:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 82c:	e1 ec       	ldi	r30, 0xC1	; 193
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	20 81       	ld	r18, Z
 832:	28 61       	ori	r18, 0x18	; 24
 834:	20 83       	st	Z, r18
 836:	e2 ec       	ldi	r30, 0xC2	; 194
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	20 81       	ld	r18, Z
 83c:	26 60       	ori	r18, 0x06	; 6
 83e:	20 83       	st	Z, r18
 840:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 844:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 848:	08 95       	ret

0000084a <putchUSART1>:
 84a:	e8 ec       	ldi	r30, 0xC8	; 200
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	90 81       	ld	r25, Z
 850:	95 ff       	sbrs	r25, 5
 852:	fd cf       	rjmp	.-6      	; 0x84e <putchUSART1+0x4>
 854:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 858:	08 95       	ret

0000085a <putsUSART1>:

void putsUSART1(char *ptr, int length){
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	8c 01       	movw	r16, r24
 868:	7b 01       	movw	r14, r22
	int i = 0;
	while((i <= length)){
 86a:	77 23       	and	r23, r23
 86c:	54 f0       	brlt	.+20     	; 0x882 <putsUSART1+0x28>
 86e:	c0 e0       	ldi	r28, 0x00	; 0
 870:	d0 e0       	ldi	r29, 0x00	; 0
		putchUSART1(*ptr);
 872:	f8 01       	movw	r30, r16
 874:	81 91       	ld	r24, Z+
 876:	8f 01       	movw	r16, r30
 878:	e8 df       	rcall	.-48     	; 0x84a <putchUSART1>
		ptr++;
		i++;
 87a:	21 96       	adiw	r28, 0x01	; 1
	*ptr = '\0';
}

void putsUSART1(char *ptr, int length){
	int i = 0;
	while((i <= length)){
 87c:	ec 16       	cp	r14, r28
 87e:	fd 06       	cpc	r15, r29
 880:	c4 f7       	brge	.-16     	; 0x872 <putsUSART1+0x18>
		putchUSART1(*ptr);
		ptr++;
		i++;
	}
}
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	1f 91       	pop	r17
 888:	0f 91       	pop	r16
 88a:	ff 90       	pop	r15
 88c:	ef 90       	pop	r14
 88e:	08 95       	ret

00000890 <__divmodhi4>:
 890:	97 fb       	bst	r25, 7
 892:	07 2e       	mov	r0, r23
 894:	16 f4       	brtc	.+4      	; 0x89a <__divmodhi4+0xa>
 896:	00 94       	com	r0
 898:	06 d0       	rcall	.+12     	; 0x8a6 <__divmodhi4_neg1>
 89a:	77 fd       	sbrc	r23, 7
 89c:	08 d0       	rcall	.+16     	; 0x8ae <__divmodhi4_neg2>
 89e:	27 d0       	rcall	.+78     	; 0x8ee <__udivmodhi4>
 8a0:	07 fc       	sbrc	r0, 7
 8a2:	05 d0       	rcall	.+10     	; 0x8ae <__divmodhi4_neg2>
 8a4:	3e f4       	brtc	.+14     	; 0x8b4 <__divmodhi4_exit>

000008a6 <__divmodhi4_neg1>:
 8a6:	90 95       	com	r25
 8a8:	81 95       	neg	r24
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__divmodhi4_neg2>:
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255

000008b4 <__divmodhi4_exit>:
 8b4:	08 95       	ret

000008b6 <__divmodsi4>:
 8b6:	05 2e       	mov	r0, r21
 8b8:	97 fb       	bst	r25, 7
 8ba:	16 f4       	brtc	.+4      	; 0x8c0 <__divmodsi4+0xa>
 8bc:	00 94       	com	r0
 8be:	0f d0       	rcall	.+30     	; 0x8de <__negsi2>
 8c0:	57 fd       	sbrc	r21, 7
 8c2:	05 d0       	rcall	.+10     	; 0x8ce <__divmodsi4_neg2>
 8c4:	28 d0       	rcall	.+80     	; 0x916 <__udivmodsi4>
 8c6:	07 fc       	sbrc	r0, 7
 8c8:	02 d0       	rcall	.+4      	; 0x8ce <__divmodsi4_neg2>
 8ca:	46 f4       	brtc	.+16     	; 0x8dc <__divmodsi4_exit>
 8cc:	08 c0       	rjmp	.+16     	; 0x8de <__negsi2>

000008ce <__divmodsi4_neg2>:
 8ce:	50 95       	com	r21
 8d0:	40 95       	com	r20
 8d2:	30 95       	com	r19
 8d4:	21 95       	neg	r18
 8d6:	3f 4f       	sbci	r19, 0xFF	; 255
 8d8:	4f 4f       	sbci	r20, 0xFF	; 255
 8da:	5f 4f       	sbci	r21, 0xFF	; 255

000008dc <__divmodsi4_exit>:
 8dc:	08 95       	ret

000008de <__negsi2>:
 8de:	90 95       	com	r25
 8e0:	80 95       	com	r24
 8e2:	70 95       	com	r23
 8e4:	61 95       	neg	r22
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__udivmodhi4>:
 8ee:	aa 1b       	sub	r26, r26
 8f0:	bb 1b       	sub	r27, r27
 8f2:	51 e1       	ldi	r21, 0x11	; 17
 8f4:	07 c0       	rjmp	.+14     	; 0x904 <__udivmodhi4_ep>

000008f6 <__udivmodhi4_loop>:
 8f6:	aa 1f       	adc	r26, r26
 8f8:	bb 1f       	adc	r27, r27
 8fa:	a6 17       	cp	r26, r22
 8fc:	b7 07       	cpc	r27, r23
 8fe:	10 f0       	brcs	.+4      	; 0x904 <__udivmodhi4_ep>
 900:	a6 1b       	sub	r26, r22
 902:	b7 0b       	sbc	r27, r23

00000904 <__udivmodhi4_ep>:
 904:	88 1f       	adc	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	5a 95       	dec	r21
 90a:	a9 f7       	brne	.-22     	; 0x8f6 <__udivmodhi4_loop>
 90c:	80 95       	com	r24
 90e:	90 95       	com	r25
 910:	bc 01       	movw	r22, r24
 912:	cd 01       	movw	r24, r26
 914:	08 95       	ret

00000916 <__udivmodsi4>:
 916:	a1 e2       	ldi	r26, 0x21	; 33
 918:	1a 2e       	mov	r1, r26
 91a:	aa 1b       	sub	r26, r26
 91c:	bb 1b       	sub	r27, r27
 91e:	fd 01       	movw	r30, r26
 920:	0d c0       	rjmp	.+26     	; 0x93c <__udivmodsi4_ep>

00000922 <__udivmodsi4_loop>:
 922:	aa 1f       	adc	r26, r26
 924:	bb 1f       	adc	r27, r27
 926:	ee 1f       	adc	r30, r30
 928:	ff 1f       	adc	r31, r31
 92a:	a2 17       	cp	r26, r18
 92c:	b3 07       	cpc	r27, r19
 92e:	e4 07       	cpc	r30, r20
 930:	f5 07       	cpc	r31, r21
 932:	20 f0       	brcs	.+8      	; 0x93c <__udivmodsi4_ep>
 934:	a2 1b       	sub	r26, r18
 936:	b3 0b       	sbc	r27, r19
 938:	e4 0b       	sbc	r30, r20
 93a:	f5 0b       	sbc	r31, r21

0000093c <__udivmodsi4_ep>:
 93c:	66 1f       	adc	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	1a 94       	dec	r1
 946:	69 f7       	brne	.-38     	; 0x922 <__udivmodsi4_loop>
 948:	60 95       	com	r22
 94a:	70 95       	com	r23
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	9b 01       	movw	r18, r22
 952:	ac 01       	movw	r20, r24
 954:	bd 01       	movw	r22, r26
 956:	cf 01       	movw	r24, r30
 958:	08 95       	ret

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
