
Osciloscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e0c  00800212  00800212  00000ea6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a04  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000122e  00000000  00000000  00003b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152d  00000000  00000000  00004d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00006298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acc  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016be  00000000  00000000  00007340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  000089fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f1 c1       	rjmp	.+994    	; 0x3e4 <__ctors_end>
   2:	00 00       	nop
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
   6:	00 00       	nop
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
   a:	00 00       	nop
   c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
   e:	00 00       	nop
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
  12:	00 00       	nop
  14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
  16:	00 00       	nop
  18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
  1e:	00 00       	nop
  20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
  22:	00 00       	nop
  24:	fe c1       	rjmp	.+1020   	; 0x422 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c1       	rjmp	.+1016   	; 0x422 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c1       	rjmp	.+1004   	; 0x422 <__bad_interrupt>
  36:	00 00       	nop
  38:	f4 c1       	rjmp	.+1000   	; 0x422 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f2 c1       	rjmp	.+996    	; 0x422 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f0 c1       	rjmp	.+992    	; 0x422 <__bad_interrupt>
  42:	00 00       	nop
  44:	87 c4       	rjmp	.+2318   	; 0x954 <__vector_17>
  46:	00 00       	nop
  48:	ec c1       	rjmp	.+984    	; 0x422 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ea c1       	rjmp	.+980    	; 0x422 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e8 c1       	rjmp	.+976    	; 0x422 <__bad_interrupt>
  52:	00 00       	nop
  54:	e6 c1       	rjmp	.+972    	; 0x422 <__bad_interrupt>
  56:	00 00       	nop
  58:	e4 c1       	rjmp	.+968    	; 0x422 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e2 c1       	rjmp	.+964    	; 0x422 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e0 c1       	rjmp	.+960    	; 0x422 <__bad_interrupt>
  62:	00 00       	nop
  64:	de c1       	rjmp	.+956    	; 0x422 <__bad_interrupt>
  66:	00 00       	nop
  68:	dc c1       	rjmp	.+952    	; 0x422 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	da c1       	rjmp	.+948    	; 0x422 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d8 c1       	rjmp	.+944    	; 0x422 <__bad_interrupt>
  72:	00 00       	nop
  74:	88 c4       	rjmp	.+2320   	; 0x986 <__vector_29>
  76:	00 00       	nop
  78:	d4 c1       	rjmp	.+936    	; 0x422 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d2 c1       	rjmp	.+932    	; 0x422 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d0 c1       	rjmp	.+928    	; 0x422 <__bad_interrupt>
  82:	00 00       	nop
  84:	ce c1       	rjmp	.+924    	; 0x422 <__bad_interrupt>
  86:	00 00       	nop
  88:	cc c1       	rjmp	.+920    	; 0x422 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ca c1       	rjmp	.+916    	; 0x422 <__bad_interrupt>
  8e:	00 00       	nop
  90:	df c4       	rjmp	.+2494   	; 0xa50 <__vector_36>
  92:	00 00       	nop
  94:	c6 c1       	rjmp	.+908    	; 0x422 <__bad_interrupt>
  96:	00 00       	nop
  98:	c4 c1       	rjmp	.+904    	; 0x422 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c2 c1       	rjmp	.+900    	; 0x422 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c0 c1       	rjmp	.+896    	; 0x422 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	be c1       	rjmp	.+892    	; 0x422 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	bc c1       	rjmp	.+888    	; 0x422 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	ba c1       	rjmp	.+884    	; 0x422 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b8 c1       	rjmp	.+880    	; 0x422 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	b6 c1       	rjmp	.+876    	; 0x422 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	b4 c1       	rjmp	.+872    	; 0x422 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	b2 c1       	rjmp	.+868    	; 0x422 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b0 c1       	rjmp	.+864    	; 0x422 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	ae c1       	rjmp	.+860    	; 0x422 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	ac c1       	rjmp	.+856    	; 0x422 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	aa c1       	rjmp	.+852    	; 0x422 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a8 c1       	rjmp	.+848    	; 0x422 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	a6 c1       	rjmp	.+844    	; 0x422 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a4 c1       	rjmp	.+840    	; 0x422 <__bad_interrupt>
  da:	00 00       	nop
  dc:	a2 c1       	rjmp	.+836    	; 0x422 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a0 c1       	rjmp	.+832    	; 0x422 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
  ec:	00 00       	nop
  ee:	5f 00       	.word	0x005f	; ????
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	00 00       	nop
  f6:	07 00       	.word	0x0007	; ????
  f8:	07 00       	.word	0x0007	; ????
  fa:	00 00       	nop
  fc:	00 14       	cp	r0, r0
  fe:	7f 14       	cp	r7, r15
 100:	7f 14       	cp	r7, r15
 102:	00 00       	nop
 104:	00 24       	eor	r0, r0
 106:	2a 7f       	andi	r18, 0xFA	; 250
 108:	2a 12       	cpse	r2, r26
 10a:	00 00       	nop
 10c:	00 23       	and	r16, r16
 10e:	13 08       	sbc	r1, r3
 110:	64 62       	ori	r22, 0x24	; 36
 112:	00 00       	nop
 114:	00 36       	cpi	r16, 0x60	; 96
 116:	49 55       	subi	r20, 0x59	; 89
 118:	22 50       	subi	r18, 0x02	; 2
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	05 03       	mulsu	r16, r21
 120:	00 00       	nop
 122:	00 00       	nop
 124:	00 1c       	adc	r0, r0
 126:	22 41       	sbci	r18, 0x12	; 18
 128:	00 00       	nop
 12a:	00 00       	nop
 12c:	00 41       	sbci	r16, 0x10	; 16
 12e:	22 1c       	adc	r2, r2
 130:	00 00       	nop
 132:	00 00       	nop
 134:	00 08       	sbc	r0, r0
 136:	2a 1c       	adc	r2, r10
 138:	2a 08       	sbc	r2, r10
 13a:	00 00       	nop
 13c:	00 08       	sbc	r0, r0
 13e:	08 3e       	cpi	r16, 0xE8	; 232
 140:	08 08       	sbc	r0, r8
 142:	00 00       	nop
 144:	00 a0       	ldd	r0, Z+32	; 0x20
 146:	60 00       	.word	0x0060	; ????
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	08 08       	sbc	r0, r8
 150:	08 08       	sbc	r0, r8
 152:	00 00       	nop
 154:	00 60       	ori	r16, 0x00	; 0
 156:	60 00       	.word	0x0060	; ????
 158:	00 00       	nop
 15a:	00 00       	nop
 15c:	00 20       	and	r0, r0
 15e:	10 08       	sbc	r1, r0
 160:	04 02       	muls	r16, r20
 162:	00 00       	nop
 164:	00 3e       	cpi	r16, 0xE0	; 224
 166:	51 49       	sbci	r21, 0x91	; 145
 168:	45 3e       	cpi	r20, 0xE5	; 229
 16a:	00 00       	nop
 16c:	00 00       	nop
 16e:	42 7f       	andi	r20, 0xF2	; 242
 170:	40 00       	.word	0x0040	; ????
 172:	00 00       	nop
 174:	00 62       	ori	r16, 0x20	; 32
 176:	51 49       	sbci	r21, 0x91	; 145
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	00 00       	nop
 17c:	00 22       	and	r0, r16
 17e:	41 49       	sbci	r20, 0x91	; 145
 180:	49 36       	cpi	r20, 0x69	; 105
 182:	00 00       	nop
 184:	00 18       	sub	r0, r0
 186:	14 12       	cpse	r1, r20
 188:	7f 10       	cpse	r7, r15
 18a:	00 00       	nop
 18c:	00 27       	eor	r16, r16
 18e:	45 45       	sbci	r20, 0x55	; 85
 190:	45 39       	cpi	r20, 0x95	; 149
 192:	00 00       	nop
 194:	00 3c       	cpi	r16, 0xC0	; 192
 196:	4a 49       	sbci	r20, 0x9A	; 154
 198:	49 30       	cpi	r20, 0x09	; 9
 19a:	00 00       	nop
 19c:	00 01       	movw	r0, r0
 19e:	71 09       	sbc	r23, r1
 1a0:	05 03       	mulsu	r16, r21
 1a2:	00 00       	nop
 1a4:	00 36       	cpi	r16, 0x60	; 96
 1a6:	49 49       	sbci	r20, 0x99	; 153
 1a8:	49 36       	cpi	r20, 0x69	; 105
 1aa:	00 00       	nop
 1ac:	00 06       	cpc	r0, r16
 1ae:	49 49       	sbci	r20, 0x99	; 153
 1b0:	29 1e       	adc	r2, r25
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	36 36       	cpi	r19, 0x66	; 102
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	00 00       	nop
 1be:	ac 6c       	ori	r26, 0xCC	; 204
 1c0:	00 00       	nop
 1c2:	00 00       	nop
 1c4:	00 08       	sbc	r0, r0
 1c6:	14 22       	and	r1, r20
 1c8:	41 00       	.word	0x0041	; ????
 1ca:	00 00       	nop
 1cc:	00 14       	cp	r0, r0
 1ce:	14 14       	cp	r1, r4
 1d0:	14 14       	cp	r1, r4
 1d2:	00 00       	nop
 1d4:	00 41       	sbci	r16, 0x10	; 16
 1d6:	22 14       	cp	r2, r2
 1d8:	08 00       	.word	0x0008	; ????
 1da:	00 00       	nop
 1dc:	00 02       	muls	r16, r16
 1de:	01 51       	subi	r16, 0x11	; 17
 1e0:	09 06       	cpc	r0, r25
 1e2:	00 00       	nop
 1e4:	00 32       	cpi	r16, 0x20	; 32
 1e6:	49 79       	andi	r20, 0x99	; 153
 1e8:	41 3e       	cpi	r20, 0xE1	; 225
 1ea:	00 00       	nop
 1ec:	00 7e       	andi	r16, 0xE0	; 224
 1ee:	09 09       	sbc	r16, r9
 1f0:	09 7e       	andi	r16, 0xE9	; 233
 1f2:	00 00       	nop
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	49 49       	sbci	r20, 0x99	; 153
 1f8:	49 36       	cpi	r20, 0x69	; 105
 1fa:	00 00       	nop
 1fc:	00 3e       	cpi	r16, 0xE0	; 224
 1fe:	41 41       	sbci	r20, 0x11	; 17
 200:	41 22       	and	r4, r17
 202:	00 00       	nop
 204:	00 7f       	andi	r16, 0xF0	; 240
 206:	41 41       	sbci	r20, 0x11	; 17
 208:	22 1c       	adc	r2, r2
 20a:	00 00       	nop
 20c:	00 7f       	andi	r16, 0xF0	; 240
 20e:	49 49       	sbci	r20, 0x99	; 153
 210:	49 41       	sbci	r20, 0x19	; 25
 212:	00 00       	nop
 214:	00 7f       	andi	r16, 0xF0	; 240
 216:	09 09       	sbc	r16, r9
 218:	09 01       	movw	r0, r18
 21a:	00 00       	nop
 21c:	00 3e       	cpi	r16, 0xE0	; 224
 21e:	41 41       	sbci	r20, 0x11	; 17
 220:	51 72       	andi	r21, 0x21	; 33
 222:	00 00       	nop
 224:	00 7f       	andi	r16, 0xF0	; 240
 226:	08 08       	sbc	r0, r8
 228:	08 7f       	andi	r16, 0xF8	; 248
 22a:	00 00       	nop
 22c:	00 41       	sbci	r16, 0x10	; 16
 22e:	7f 41       	sbci	r23, 0x1F	; 31
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 20       	and	r0, r0
 236:	40 41       	sbci	r20, 0x10	; 16
 238:	3f 01       	movw	r6, r30
 23a:	00 00       	nop
 23c:	00 7f       	andi	r16, 0xF0	; 240
 23e:	08 14       	cp	r0, r8
 240:	22 41       	sbci	r18, 0x12	; 18
 242:	00 00       	nop
 244:	00 7f       	andi	r16, 0xF0	; 240
 246:	40 40       	sbci	r20, 0x00	; 0
 248:	40 40       	sbci	r20, 0x00	; 0
 24a:	00 00       	nop
 24c:	00 7f       	andi	r16, 0xF0	; 240
 24e:	02 0c       	add	r0, r2
 250:	02 7f       	andi	r16, 0xF2	; 242
 252:	00 00       	nop
 254:	00 7f       	andi	r16, 0xF0	; 240
 256:	04 08       	sbc	r0, r4
 258:	10 7f       	andi	r17, 0xF0	; 240
 25a:	00 00       	nop
 25c:	00 3e       	cpi	r16, 0xE0	; 224
 25e:	41 41       	sbci	r20, 0x11	; 17
 260:	41 3e       	cpi	r20, 0xE1	; 225
 262:	00 00       	nop
 264:	00 7f       	andi	r16, 0xF0	; 240
 266:	09 09       	sbc	r16, r9
 268:	09 06       	cpc	r0, r25
 26a:	00 00       	nop
 26c:	00 3e       	cpi	r16, 0xE0	; 224
 26e:	41 51       	subi	r20, 0x11	; 17
 270:	21 5e       	subi	r18, 0xE1	; 225
 272:	00 00       	nop
 274:	00 7f       	andi	r16, 0xF0	; 240
 276:	09 19       	sub	r16, r9
 278:	29 46       	sbci	r18, 0x69	; 105
 27a:	00 00       	nop
 27c:	00 26       	eor	r0, r16
 27e:	49 49       	sbci	r20, 0x99	; 153
 280:	49 32       	cpi	r20, 0x29	; 41
 282:	00 00       	nop
 284:	00 01       	movw	r0, r0
 286:	01 7f       	andi	r16, 0xF1	; 241
 288:	01 01       	movw	r0, r2
 28a:	00 00       	nop
 28c:	00 3f       	cpi	r16, 0xF0	; 240
 28e:	40 40       	sbci	r20, 0x00	; 0
 290:	40 3f       	cpi	r20, 0xF0	; 240
 292:	00 00       	nop
 294:	00 1f       	adc	r16, r16
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	20 1f       	adc	r18, r16
 29a:	00 00       	nop
 29c:	00 3f       	cpi	r16, 0xF0	; 240
 29e:	40 38       	cpi	r20, 0x80	; 128
 2a0:	40 3f       	cpi	r20, 0xF0	; 240
 2a2:	00 00       	nop
 2a4:	00 63       	ori	r16, 0x30	; 48
 2a6:	14 08       	sbc	r1, r4
 2a8:	14 63       	ori	r17, 0x34	; 52
 2aa:	00 00       	nop
 2ac:	00 03       	mulsu	r16, r16
 2ae:	04 78       	andi	r16, 0x84	; 132
 2b0:	04 03       	mulsu	r16, r20
 2b2:	00 00       	nop
 2b4:	00 61       	ori	r16, 0x10	; 16
 2b6:	51 49       	sbci	r21, 0x91	; 145
 2b8:	45 43       	sbci	r20, 0x35	; 53
 2ba:	00 00       	nop
 2bc:	00 7f       	andi	r16, 0xF0	; 240
 2be:	41 41       	sbci	r20, 0x11	; 17
 2c0:	00 00       	nop
 2c2:	00 00       	nop
 2c4:	00 02       	muls	r16, r16
 2c6:	04 08       	sbc	r0, r4
 2c8:	10 20       	and	r1, r0
 2ca:	00 00       	nop
 2cc:	00 41       	sbci	r16, 0x10	; 16
 2ce:	41 7f       	andi	r20, 0xF1	; 241
 2d0:	00 00       	nop
 2d2:	00 00       	nop
 2d4:	00 04       	cpc	r0, r0
 2d6:	02 01       	movw	r0, r4
 2d8:	02 04       	cpc	r0, r2
 2da:	00 00       	nop
 2dc:	00 80       	ld	r0, Z
 2de:	80 80       	ld	r8, Z
 2e0:	80 80       	ld	r8, Z
 2e2:	00 00       	nop
 2e4:	00 01       	movw	r0, r0
 2e6:	02 04       	cpc	r0, r2
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 20       	and	r0, r0
 2ee:	54 54       	subi	r21, 0x44	; 68
 2f0:	54 78       	andi	r21, 0x84	; 132
 2f2:	00 00       	nop
 2f4:	00 7f       	andi	r16, 0xF0	; 240
 2f6:	48 44       	sbci	r20, 0x48	; 72
 2f8:	44 38       	cpi	r20, 0x84	; 132
 2fa:	00 00       	nop
 2fc:	00 38       	cpi	r16, 0x80	; 128
 2fe:	44 44       	sbci	r20, 0x44	; 68
 300:	28 00       	.word	0x0028	; ????
 302:	00 00       	nop
 304:	00 38       	cpi	r16, 0x80	; 128
 306:	44 44       	sbci	r20, 0x44	; 68
 308:	48 7f       	andi	r20, 0xF8	; 248
 30a:	00 00       	nop
 30c:	00 38       	cpi	r16, 0x80	; 128
 30e:	54 54       	subi	r21, 0x44	; 68
 310:	54 18       	sub	r5, r4
 312:	00 00       	nop
 314:	00 08       	sbc	r0, r0
 316:	7e 09       	sbc	r23, r14
 318:	02 00       	.word	0x0002	; ????
 31a:	00 00       	nop
 31c:	00 18       	sub	r0, r0
 31e:	a4 a4       	ldd	r10, Z+44	; 0x2c
 320:	a4 7c       	andi	r26, 0xC4	; 196
 322:	00 00       	nop
 324:	00 7f       	andi	r16, 0xF0	; 240
 326:	08 04       	cpc	r0, r8
 328:	04 78       	andi	r16, 0x84	; 132
 32a:	00 00       	nop
 32c:	00 00       	nop
 32e:	7d 00       	.word	0x007d	; ????
 330:	00 00       	nop
 332:	00 00       	nop
 334:	00 80       	ld	r0, Z
 336:	84 7d       	andi	r24, 0xD4	; 212
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 7f       	andi	r16, 0xF0	; 240
 33e:	10 28       	or	r1, r0
 340:	44 00       	.word	0x0044	; ????
 342:	00 00       	nop
 344:	00 41       	sbci	r16, 0x10	; 16
 346:	7f 40       	sbci	r23, 0x0F	; 15
 348:	00 00       	nop
 34a:	00 00       	nop
 34c:	00 7c       	andi	r16, 0xC0	; 192
 34e:	04 18       	sub	r0, r4
 350:	04 78       	andi	r16, 0x84	; 132
 352:	00 00       	nop
 354:	00 7c       	andi	r16, 0xC0	; 192
 356:	08 04       	cpc	r0, r8
 358:	7c 00       	.word	0x007c	; ????
 35a:	00 00       	nop
 35c:	00 38       	cpi	r16, 0x80	; 128
 35e:	44 44       	sbci	r20, 0x44	; 68
 360:	38 00       	.word	0x0038	; ????
 362:	00 00       	nop
 364:	00 fc       	sbrc	r0, 0
 366:	24 24       	eor	r2, r4
 368:	18 00       	.word	0x0018	; ????
 36a:	00 00       	nop
 36c:	00 18       	sub	r0, r0
 36e:	24 24       	eor	r2, r4
 370:	fc 00       	.word	0x00fc	; ????
 372:	00 00       	nop
 374:	00 00       	nop
 376:	7c 08       	sbc	r7, r12
 378:	04 00       	.word	0x0004	; ????
 37a:	00 00       	nop
 37c:	00 48       	sbci	r16, 0x80	; 128
 37e:	54 54       	subi	r21, 0x44	; 68
 380:	24 00       	.word	0x0024	; ????
 382:	00 00       	nop
 384:	00 04       	cpc	r0, r0
 386:	7f 44       	sbci	r23, 0x4F	; 79
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	00 3c       	cpi	r16, 0xC0	; 192
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	7c 00       	.word	0x007c	; ????
 392:	00 00       	nop
 394:	00 1c       	adc	r0, r0
 396:	20 40       	sbci	r18, 0x00	; 0
 398:	20 1c       	adc	r2, r0
 39a:	00 00       	nop
 39c:	00 3c       	cpi	r16, 0xC0	; 192
 39e:	40 30       	cpi	r20, 0x00	; 0
 3a0:	40 3c       	cpi	r20, 0xC0	; 192
 3a2:	00 00       	nop
 3a4:	00 44       	sbci	r16, 0x40	; 64
 3a6:	28 10       	cpse	r2, r8
 3a8:	28 44       	sbci	r18, 0x48	; 72
 3aa:	00 00       	nop
 3ac:	00 1c       	adc	r0, r0
 3ae:	a0 a0       	ldd	r10, Z+32	; 0x20
 3b0:	7c 00       	.word	0x007c	; ????
 3b2:	00 00       	nop
 3b4:	00 44       	sbci	r16, 0x40	; 64
 3b6:	64 54       	subi	r22, 0x44	; 68
 3b8:	4c 44       	sbci	r20, 0x4C	; 76
 3ba:	00 00       	nop
 3bc:	00 08       	sbc	r0, r0
 3be:	36 41       	sbci	r19, 0x16	; 22
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	7f 00       	.word	0x007f	; ????
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	00 41       	sbci	r16, 0x10	; 16
 3ce:	36 08       	sbc	r3, r6
 3d0:	00 00       	nop
 3d2:	00 00       	nop
 3d4:	00 02       	muls	r16, r16
 3d6:	01 01       	movw	r0, r2
 3d8:	02 01       	movw	r0, r4
 3da:	00 00       	nop
 3dc:	00 02       	muls	r16, r16
 3de:	05 05       	cpc	r16, r5
 3e0:	02 00       	.word	0x0002	; ????
	...

000003e4 <__ctors_end>:
 3e4:	11 24       	eor	r1, r1
 3e6:	1f be       	out	0x3f, r1	; 63
 3e8:	cf ef       	ldi	r28, 0xFF	; 255
 3ea:	d1 e2       	ldi	r29, 0x21	; 33
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	00 e0       	ldi	r16, 0x00	; 0
 3f2:	0c bf       	out	0x3c, r16	; 60

000003f4 <__do_copy_data>:
 3f4:	12 e0       	ldi	r17, 0x02	; 2
 3f6:	a0 e0       	ldi	r26, 0x00	; 0
 3f8:	b2 e0       	ldi	r27, 0x02	; 2
 3fa:	e0 e0       	ldi	r30, 0x00	; 0
 3fc:	fe e0       	ldi	r31, 0x0E	; 14
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	0b bf       	out	0x3b, r16	; 59
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	07 90       	elpm	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	a2 31       	cpi	r26, 0x12	; 18
 40a:	b1 07       	cpc	r27, r17
 40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

0000040e <__do_clear_bss>:
 40e:	20 e1       	ldi	r18, 0x10	; 16
 410:	a2 e1       	ldi	r26, 0x12	; 18
 412:	b2 e0       	ldi	r27, 0x02	; 2
 414:	01 c0       	rjmp	.+2      	; 0x418 <.do_clear_bss_start>

00000416 <.do_clear_bss_loop>:
 416:	1d 92       	st	X+, r1

00000418 <.do_clear_bss_start>:
 418:	ae 31       	cpi	r26, 0x1E	; 30
 41a:	b2 07       	cpc	r27, r18
 41c:	e1 f7       	brne	.-8      	; 0x416 <.do_clear_bss_loop>
 41e:	0d d1       	rcall	.+538    	; 0x63a <main>
 420:	ed c4       	rjmp	.+2522   	; 0xdfc <_exit>

00000422 <__bad_interrupt>:
 422:	ee cd       	rjmp	.-1060   	; 0x0 <__vectors>

00000424 <init_adc>:
 424:	ea e7       	ldi	r30, 0x7A	; 122
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	90 81       	ld	r25, Z
 42a:	9c 68       	ori	r25, 0x8C	; 140
 42c:	90 83       	st	Z, r25
 42e:	ec e7       	ldi	r30, 0x7C	; 124
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 83       	st	Z, r24
 434:	90 81       	ld	r25, Z
 436:	90 62       	ori	r25, 0x20	; 32
 438:	90 83       	st	Z, r25
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	a9 01       	movw	r20, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <init_adc+0x22>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <init_adc+0x1e>
 44a:	ee e7       	ldi	r30, 0x7E	; 126
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	40 83       	st	Z, r20
 450:	80 81       	ld	r24, Z
 452:	80 95       	com	r24
 454:	80 83       	st	Z, r24
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x70007d>
 45c:	08 95       	ret

0000045e <I2C_Init>:
 45e:	08 9a       	sbi	0x01, 0	; 1
 460:	10 9a       	sbi	0x02, 0	; 2
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	83 ed       	ldi	r24, 0xD3	; 211
 466:	90 e3       	ldi	r25, 0x30	; 48
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <I2C_Init+0xa>
 470:	00 c0       	rjmp	.+0      	; 0x472 <I2C_Init+0x14>
 472:	00 00       	nop
 474:	82 e1       	ldi	r24, 0x12	; 18
 476:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 47a:	e9 eb       	ldi	r30, 0xB9	; 185
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	8c 7f       	andi	r24, 0xFC	; 252
 482:	80 83       	st	Z, r24
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 48a:	08 95       	ret

0000048c <I2C_Start>:
 48c:	94 ea       	ldi	r25, 0xA4	; 164
 48e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 492:	ec eb       	ldi	r30, 0xBC	; 188
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	90 81       	ld	r25, Z
 498:	99 23       	and	r25, r25
 49a:	ec f7       	brge	.-6      	; 0x496 <I2C_Start+0xa>
 49c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4a0:	98 7f       	andi	r25, 0xF8	; 248
 4a2:	98 30       	cpi	r25, 0x08	; 8
 4a4:	99 f4       	brne	.+38     	; 0x4cc <I2C_Start+0x40>
 4a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 4aa:	84 e8       	ldi	r24, 0x84	; 132
 4ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4b0:	ec eb       	ldi	r30, 0xBC	; 188
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	88 23       	and	r24, r24
 4b8:	ec f7       	brge	.-6      	; 0x4b4 <I2C_Start+0x28>
 4ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4be:	88 7f       	andi	r24, 0xF8	; 248
 4c0:	88 31       	cpi	r24, 0x18	; 24
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <I2C_Start+0x44>
 4c4:	80 32       	cpi	r24, 0x20	; 32
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <I2C_Start+0x48>
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	08 95       	ret
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	08 95       	ret

000004d8 <I2C_Write>:
 4d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 4dc:	84 e8       	ldi	r24, 0x84	; 132
 4de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 4e2:	ec eb       	ldi	r30, 0xBC	; 188
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	88 23       	and	r24, r24
 4ea:	ec f7       	brge	.-6      	; 0x4e6 <I2C_Write+0xe>
 4ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 4f0:	88 7f       	andi	r24, 0xF8	; 248
 4f2:	88 32       	cpi	r24, 0x28	; 40
 4f4:	21 f0       	breq	.+8      	; 0x4fe <I2C_Write+0x26>
 4f6:	80 33       	cpi	r24, 0x30	; 48
 4f8:	21 f0       	breq	.+8      	; 0x502 <I2C_Write+0x2a>
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	08 95       	ret
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret

00000506 <I2C_Stop>:
 506:	84 e9       	ldi	r24, 0x94	; 148
 508:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 50c:	ec eb       	ldi	r30, 0xBC	; 188
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	84 fd       	sbrc	r24, 4
 514:	fd cf       	rjmp	.-6      	; 0x510 <I2C_Stop+0xa>
 516:	08 95       	ret

00000518 <init_timer1>:

uint8_t _i2c_address;
uint8_t display_buffer[1024];

void init_timer1(unsigned int sps){
	TCCR1A = 0;
 518:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;
 51c:	e1 e8       	ldi	r30, 0x81	; 129
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	10 82       	st	Z, r1
	TCNT1 = 0;
 522:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 526:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCCR1B |=(1<<WGM12)|(1<<CS11)|(1<<CS10); //CTC mode
 52a:	20 81       	ld	r18, Z
 52c:	2b 60       	ori	r18, 0x0B	; 11
 52e:	20 83       	st	Z, r18
	
	OCR1A = (250000/sps)-1; //=(16.000.000*(1/sps)-64)/64
 530:	9c 01       	movw	r18, r24
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	60 e9       	ldi	r22, 0x90	; 144
 538:	70 ed       	ldi	r23, 0xD0	; 208
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	20 d4       	rcall	.+2112   	; 0xd80 <__divmodsi4>
 540:	21 50       	subi	r18, 0x01	; 1
 542:	31 09       	sbc	r19, r1
 544:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 548:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	// 	}
	// 	else{
	// 		TCCR1B |=(1<<CS10);
	// 		OCR1A = (F_CPU/(sps))-1;
	// 	}
	TIMSK1 |=(1<<OCIE1A); //interrupt when TCNNT1=OCR1A value
 54c:	ef e6       	ldi	r30, 0x6F	; 111
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	82 60       	ori	r24, 0x02	; 2
 554:	80 83       	st	Z, r24
 556:	08 95       	ret

00000558 <adc_packet_send>:
}

void adc_packet_send(volatile char *ptr){
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	fc 01       	movw	r30, r24
	// 			adc_send[j] = adc_buffer2[j-5];
	// 			j++;
	// 		}
	// 	}
	putsUSART1(adc_send, record_length3+6);
}
 56a:	0d b7       	in	r16, 0x3d	; 61
 56c:	1e b7       	in	r17, 0x3e	; 62
	TIMSK1 |=(1<<OCIE1A); //interrupt when TCNNT1=OCR1A value
}

void adc_packet_send(volatile char *ptr){
	int j = 5;
	char adc_send[record_length3 + 7];
 56e:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <record_length3>
 572:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <record_length3+0x1>
 576:	07 96       	adiw	r24, 0x07	; 7
 578:	2d b7       	in	r18, 0x3d	; 61
 57a:	3e b7       	in	r19, 0x3e	; 62
 57c:	28 1b       	sub	r18, r24
 57e:	39 0b       	sbc	r19, r25
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	3e bf       	out	0x3e, r19	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	2d bf       	out	0x3d, r18	; 61
 58a:	8d b7       	in	r24, 0x3d	; 61
 58c:	9e b7       	in	r25, 0x3e	; 62
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	7c 01       	movw	r14, r24
	int totlen = record_length3+7;
 592:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <record_length3>
 596:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <record_length3+0x1>
 59a:	07 96       	adiw	r24, 0x07	; 7
	char len2 = totlen;
	char len1 = (totlen >> 8);
	adc_send[0] = 0x55;
 59c:	25 e5       	ldi	r18, 0x55	; 85
 59e:	ad b7       	in	r26, 0x3d	; 61
 5a0:	be b7       	in	r27, 0x3e	; 62
 5a2:	11 96       	adiw	r26, 0x01	; 1
 5a4:	2c 93       	st	X, r18
	adc_send[1] = 0xAA;
 5a6:	2a ea       	ldi	r18, 0xAA	; 170
 5a8:	d7 01       	movw	r26, r14
 5aa:	11 96       	adiw	r26, 0x01	; 1
 5ac:	2c 93       	st	X, r18
 5ae:	11 97       	sbiw	r26, 0x01	; 1
	adc_send[2] = len1;
 5b0:	12 96       	adiw	r26, 0x02	; 2
 5b2:	9c 93       	st	X, r25
 5b4:	12 97       	sbiw	r26, 0x02	; 2
	adc_send[3] = len2;
 5b6:	13 96       	adiw	r26, 0x03	; 3
 5b8:	8c 93       	st	X, r24
 5ba:	13 97       	sbiw	r26, 0x03	; 3
	adc_send[4] = 0x02;
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	14 96       	adiw	r26, 0x04	; 4
 5c0:	8c 93       	st	X, r24
	char check = 0;
	adc_send[record_length3 + 5] = check;
 5c2:	a0 91 0f 07 	lds	r26, 0x070F	; 0x80070f <record_length3>
 5c6:	b0 91 10 07 	lds	r27, 0x0710	; 0x800710 <record_length3+0x1>
 5ca:	ae 0d       	add	r26, r14
 5cc:	bf 1d       	adc	r27, r15
 5ce:	15 96       	adiw	r26, 0x05	; 5
 5d0:	1c 92       	st	X, r1
	adc_send[record_length3 + 6] = check;
 5d2:	a0 91 0f 07 	lds	r26, 0x070F	; 0x80070f <record_length3>
 5d6:	b0 91 10 07 	lds	r27, 0x0710	; 0x800710 <record_length3+0x1>
 5da:	ae 0d       	add	r26, r14
 5dc:	bf 1d       	adc	r27, r15
 5de:	16 96       	adiw	r26, 0x06	; 6
 5e0:	1c 92       	st	X, r1
	
	while(j < record_length3+5){
 5e2:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <record_length3>
 5e6:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <record_length3+0x1>
 5ea:	05 96       	adiw	r24, 0x05	; 5
 5ec:	06 97       	sbiw	r24, 0x06	; 6
 5ee:	8c f0       	brlt	.+34     	; 0x612 <adc_packet_send+0xba>
 5f0:	d7 01       	movw	r26, r14
 5f2:	15 96       	adiw	r26, 0x05	; 5
 5f4:	45 e0       	ldi	r20, 0x05	; 5
 5f6:	50 e0       	ldi	r21, 0x00	; 0
		adc_send[j] = *ptr;
 5f8:	91 91       	ld	r25, Z+
 5fa:	9d 93       	st	X+, r25
		ptr++;
		j++;
 5fc:	4f 5f       	subi	r20, 0xFF	; 255
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
	adc_send[4] = 0x02;
	char check = 0;
	adc_send[record_length3 + 5] = check;
	adc_send[record_length3 + 6] = check;
	
	while(j < record_length3+5){
 600:	20 91 0f 07 	lds	r18, 0x070F	; 0x80070f <record_length3>
 604:	30 91 10 07 	lds	r19, 0x0710	; 0x800710 <record_length3+0x1>
 608:	2b 5f       	subi	r18, 0xFB	; 251
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	42 17       	cp	r20, r18
 60e:	53 07       	cpc	r21, r19
 610:	9c f3       	brlt	.-26     	; 0x5f8 <adc_packet_send+0xa0>
	// 		while(j < record_length3+5){
	// 			adc_send[j] = adc_buffer2[j-5];
	// 			j++;
	// 		}
	// 	}
	putsUSART1(adc_send, record_length3+6);
 612:	60 91 0f 07 	lds	r22, 0x070F	; 0x80070f <record_length3>
 616:	70 91 10 07 	lds	r23, 0x0710	; 0x800710 <record_length3+0x1>
 61a:	6a 5f       	subi	r22, 0xFA	; 250
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	c7 01       	movw	r24, r14
 620:	88 d3       	rcall	.+1808   	; 0xd32 <putsUSART1>
}
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	1e bf       	out	0x3e, r17	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0d bf       	out	0x3d, r16	; 61
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	08 95       	ret

0000063a <main>:

int main(void)
{
	init_adc(0x00);
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	f3 de       	rcall	.-538    	; 0x424 <init_adc>
	uart_Init(16);
 63e:	80 e1       	ldi	r24, 0x10	; 16
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	4b d3       	rcall	.+1686   	; 0xcda <uart_Init>
	uart0_Init(16);
 644:	80 e1       	ldi	r24, 0x10	; 16
 646:	90 e0       	ldi	r25, 0x00	; 0
	I2C_Init();
 648:	5a d3       	rcall	.+1716   	; 0xcfe <uart0_Init>
	InitializeDisplay();
 64a:	09 df       	rcall	.-494    	; 0x45e <I2C_Init>
 64c:	9f d2       	rcall	.+1342   	; 0xb8c <InitializeDisplay>
	reset_display();
 64e:	08 d3       	rcall	.+1552   	; 0xc60 <reset_display>
	SPI_MasterInit();
 650:	59 d2       	rcall	.+1202   	; 0xb04 <SPI_MasterInit>
 652:	78 94       	sei
	sei();
 654:	84 e6       	ldi	r24, 0x64	; 100
	init_timer1(100);
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	5f df       	rcall	.-322    	; 0x518 <init_timer1>
 65a:	0f 2e       	mov	r0, r31
 65c:	f2 e1       	ldi	r31, 0x12	; 18
			break;
			
			case 2:

			if (flagUART == 0){
				sample_rate = data_buffer[5];
 65e:	cf 2e       	mov	r12, r31
 660:	f0 e1       	ldi	r31, 0x10	; 16
 662:	df 2e       	mov	r13, r31
 664:	f0 2d       	mov	r31, r0
 666:	0f 2e       	mov	r0, r31
 668:	f8 e8       	ldi	r31, 0x88	; 136
				record_length = data_buffer[7];
				record_length2 = data_buffer[8];
				record_length3 = (record_length<<8)|record_length2;
				
				//init_timer1(sample_rate3);
				OCR1A = (250000/sample_rate3)-1;
 66a:	4f 2e       	mov	r4, r31
 66c:	51 2c       	mov	r5, r1
 66e:	f0 2d       	mov	r31, r0
 670:	88 24       	eor	r8, r8
 672:	83 94       	inc	r8
				flagUART = 1;
 674:	0f 2e       	mov	r0, r31
 676:	f3 e0       	ldi	r31, 0x03	; 3
			if(flagUART == 0){
				flagUART = 1;
			sendStrXY("Bodeplot    ",5,0);

			init_timer1(10000);
			Shape = 3; //sinus
 678:	7f 2e       	mov	r7, r31
 67a:	f0 2d       	mov	r31, r0
 67c:	99 24       	eor	r9, r9
 67e:	9a 94       	dec	r9
			Amplitude = 0xff; //3,3V
 680:	0f 2e       	mov	r0, r31
 682:	f9 ee       	ldi	r31, 0xE9	; 233
 684:	ef 2e       	mov	r14, r31
 686:	f3 e0       	ldi	r31, 0x03	; 3
 688:	ff 2e       	mov	r15, r31
 68a:	f0 2d       	mov	r31, r0
 68c:	0f 2e       	mov	r0, r31
 68e:	f0 e1       	ldi	r31, 0x10	; 16

				Amplitude_Bodeplot = (Amplitude_max - Amplitude_min)/2;

				Bodeplot_Array[j] = Amplitude_Bodeplot;
			}
			Amplitude_ref = Bodeplot_Array[0];
 690:	2f 2e       	mov	r2, r31
 692:	ff e0       	ldi	r31, 0x0F	; 15
 694:	3f 2e       	mov	r3, r31
 696:	f0 2d       	mov	r31, r0
 698:	0f 2e       	mov	r0, r31
 69a:	fe e1       	ldi	r31, 0x1E	; 30

			Bodeplot_Send[0] = 0x55;
 69c:	af 2e       	mov	r10, r31
 69e:	f2 e0       	ldi	r31, 0x02	; 2
 6a0:	bf 2e       	mov	r11, r31
 6a2:	f0 2d       	mov	r31, r0
 6a4:	02 e2       	ldi	r16, 0x22	; 34
 6a6:	13 e0       	ldi	r17, 0x03	; 3
 6a8:	c8 e1       	ldi	r28, 0x18	; 24
 6aa:	db e0       	ldi	r29, 0x0B	; 11
				Shape = 0;
				Amplitude = 0;
				Frequency = 0;
			}
			
			data_return[0] = 0x55; //sync
 6ac:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <type>
	init_timer1(100);
	char str[5];

	while (1)
	{	
		switch(type){
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <main+0x7c>
 6b4:	7d c0       	rjmp	.+250    	; 0x7b0 <main+0x176>
 6b6:	83 30       	cpi	r24, 0x03	; 3
 6b8:	09 f4       	brne	.+2      	; 0x6bc <main+0x82>
 6ba:	d2 c0       	rjmp	.+420    	; 0x860 <main+0x226>
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	b1 f7       	brne	.-20     	; 0x6ac <main+0x72>
 6c0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <flagUART>
			
			case 1:
			if(flagUART == 0){
 6c4:	81 11       	cpse	r24, r1
 6c6:	f2 cf       	rjmp	.-28     	; 0x6ac <main+0x72>
 6c8:	80 92 03 02 	sts	0x0203, r8	; 0x800203 <flagUART>
			flagUART = 1;
 6cc:	f6 01       	movw	r30, r12
 6ce:	85 81       	ldd	r24, Z+5	; 0x05
		
			BTN = data_buffer[5];
 6d0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <BTN>
 6d4:	96 81       	ldd	r25, Z+6	; 0x06
 6d6:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <SW>
			SW = data_buffer[6];
 6da:	81 11       	cpse	r24, r1
 6dc:	17 c0       	rjmp	.+46     	; 0x70c <main+0xd2>
			
			if (BTN==0){
 6de:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <ActiveIndicator>
				if (ActiveIndicator == 0){
 6e2:	81 11       	cpse	r24, r1
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <main+0xb2>
 6e6:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <Shape>
					Shape = SW;
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <main+0xc4>
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	19 f4       	brne	.+6      	; 0x6f6 <main+0xbc>
				}
				if (ActiveIndicator == 1){
 6f0:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <Amplitude>
					Amplitude = SW;
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <main+0xc4>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	11 f4       	brne	.+4      	; 0x6fe <main+0xc4>
				}
				if (ActiveIndicator == 2){
 6fa:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <Frequency>
					Frequency = SW;
 6fe:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <Frequency>
				}
				
				MCU_to_FPGA(Shape,Amplitude,Frequency);
 702:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <Amplitude>
 706:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Shape>
 70a:	06 d2       	rcall	.+1036   	; 0xb18 <MCU_to_FPGA>
 70c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <BTN>
			}
			
			if (BTN==1){
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	91 f4       	brne	.+36     	; 0x738 <main+0xfe>
 714:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <ActiveIndicator>
				if (ActiveIndicator == 2){
 718:	82 30       	cpi	r24, 0x02	; 2
 71a:	19 f4       	brne	.+6      	; 0x722 <main+0xe8>
 71c:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <ActiveIndicator>
					ActiveIndicator = 0;
 720:	2a c0       	rjmp	.+84     	; 0x776 <main+0x13c>
 722:	81 11       	cpse	r24, r1
 724:	03 c0       	rjmp	.+6      	; 0x72c <main+0xf2>
				}
				else if (ActiveIndicator == 0){
 726:	80 92 1a 02 	sts	0x021A, r8	; 0x80021a <ActiveIndicator>
					ActiveIndicator = 1;
 72a:	25 c0       	rjmp	.+74     	; 0x776 <main+0x13c>
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	19 f5       	brne	.+70     	; 0x776 <main+0x13c>
				}
				else if (ActiveIndicator == 1){
 730:	82 e0       	ldi	r24, 0x02	; 2
 732:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <ActiveIndicator>
					ActiveIndicator = 2;
 736:	1f c0       	rjmp	.+62     	; 0x776 <main+0x13c>
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	99 f4       	brne	.+38     	; 0x762 <main+0x128>
				}
			}
			
			if (BTN==2){
 73c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <start_stop>
				if (start_stop == 0){
 740:	81 11       	cpse	r24, r1
 742:	04 c1       	rjmp	.+520    	; 0x94c <main+0x312>
 744:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <Frequency>
					MCU_to_FPGA(Shape,Amplitude,Frequency); //start generator
 748:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <Amplitude>
 74c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Shape>
 750:	e3 d1       	rcall	.+966    	; 0xb18 <MCU_to_FPGA>
 752:	80 92 16 02 	sts	0x0216, r8	; 0x800216 <start_stop>
					start_stop = 1;
 756:	40 e0       	ldi	r20, 0x00	; 0
				}
				if (start_stop == 1){
					MCU_to_FPGA(0,0,0); //stop generator
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	dd d1       	rcall	.+954    	; 0xb18 <MCU_to_FPGA>
 75e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <start_stop>
					start_stop = 0;
 762:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <BTN>
				}
			}

			if (BTN==3){
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	31 f4       	brne	.+12     	; 0x776 <main+0x13c>
 76a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <Shape>
				Shape = 0;
 76e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <Amplitude>
				Amplitude = 0;
 772:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <Frequency>
				Frequency = 0;
 776:	85 e5       	ldi	r24, 0x55	; 85
 778:	88 83       	st	Y, r24
			}
			
			data_return[0] = 0x55; //sync
 77a:	8a ea       	ldi	r24, 0xAA	; 170
 77c:	89 83       	std	Y+1, r24	; 0x01
			data_return[1] = 0xAA; //sync
 77e:	1a 82       	std	Y+2, r1	; 0x02
 780:	8b e0       	ldi	r24, 0x0B	; 11
			data_return[2] = 0x00; //length
 782:	8b 83       	std	Y+3, r24	; 0x03
			data_return[3] = 0x0b; //length
 784:	8c 82       	std	Y+4, r8	; 0x04
 786:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <ActiveIndicator>
			data_return[4] = 0x01; //type
			data_return[5] = ActiveIndicator; // indicator
 78a:	8d 83       	std	Y+5, r24	; 0x05
 78c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Shape>
			data_return[6] = Shape; // shape
 790:	8e 83       	std	Y+6, r24	; 0x06
 792:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <Amplitude>
			data_return[7] = Amplitude; // amplitude
 796:	8f 83       	std	Y+7, r24	; 0x07
 798:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Frequency>
			data_return[8] = Frequency; // frequency
 79c:	88 87       	std	Y+8, r24	; 0x08
 79e:	19 86       	std	Y+9, r1	; 0x09
			data_return[9] = 0x00; //checksum
 7a0:	1a 86       	std	Y+10, r1	; 0x0a
			data_return[10] = 0x00; //checksum
 7a2:	6a e0       	ldi	r22, 0x0A	; 10
			
			putsUSART1(data_return,10);
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	ce 01       	movw	r24, r28
 7a8:	c4 d2       	rcall	.+1416   	; 0xd32 <putsUSART1>
 7aa:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <type>
			type = 0; // Reset type, s? knapper kun registreres 1 gang
 7ae:	7e cf       	rjmp	.-260    	; 0x6ac <main+0x72>
 7b0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <flagUART>
			case 0:
			break;
			
			case 2:

			if (flagUART == 0){
 7b4:	81 11       	cpse	r24, r1
 7b6:	41 c0       	rjmp	.+130    	; 0x83a <main+0x200>
 7b8:	f6 01       	movw	r30, r12
 7ba:	85 81       	ldd	r24, Z+5	; 0x05
				sample_rate = data_buffer[5];
 7bc:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <sample_rate>
 7c0:	86 81       	ldd	r24, Z+6	; 0x06
 7c2:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <sample_rate2>
				sample_rate2 = data_buffer[6];
 7c6:	20 91 11 0b 	lds	r18, 0x0B11	; 0x800b11 <sample_rate>
				sample_rate3 = (sample_rate<<8)|sample_rate2;
 7ca:	80 91 23 0b 	lds	r24, 0x0B23	; 0x800b23 <sample_rate2>
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	92 2b       	or	r25, r18
 7d2:	90 93 10 10 	sts	0x1010, r25	; 0x801010 <sample_rate3+0x1>
 7d6:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <sample_rate3>
 7da:	87 81       	ldd	r24, Z+7	; 0x07
 7dc:	90 e0       	ldi	r25, 0x00	; 0
				
				record_length = data_buffer[7];
 7de:	90 93 0d 0f 	sts	0x0F0D, r25	; 0x800f0d <record_length+0x1>
 7e2:	80 93 0c 0f 	sts	0x0F0C, r24	; 0x800f0c <record_length>
 7e6:	80 85       	ldd	r24, Z+8	; 0x08
 7e8:	90 e0       	ldi	r25, 0x00	; 0
				record_length2 = data_buffer[8];
 7ea:	90 93 0f 0f 	sts	0x0F0F, r25	; 0x800f0f <record_length2+0x1>
 7ee:	80 93 0e 0f 	sts	0x0F0E, r24	; 0x800f0e <record_length2>
 7f2:	80 91 0c 0f 	lds	r24, 0x0F0C	; 0x800f0c <record_length>
				record_length3 = (record_length<<8)|record_length2;
 7f6:	90 91 0d 0f 	lds	r25, 0x0F0D	; 0x800f0d <record_length+0x1>
 7fa:	20 91 0e 0f 	lds	r18, 0x0F0E	; 0x800f0e <record_length2>
 7fe:	30 91 0f 0f 	lds	r19, 0x0F0F	; 0x800f0f <record_length2+0x1>
 802:	98 2f       	mov	r25, r24
 804:	88 27       	eor	r24, r24
 806:	82 2b       	or	r24, r18
 808:	93 2b       	or	r25, r19
 80a:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <record_length3+0x1>
 80e:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <record_length3>
 812:	20 91 0f 10 	lds	r18, 0x100F	; 0x80100f <sample_rate3>
				
				//init_timer1(sample_rate3);
				OCR1A = (250000/sample_rate3)-1;
 816:	30 91 10 10 	lds	r19, 0x1010	; 0x801010 <sample_rate3+0x1>
 81a:	03 2e       	mov	r0, r19
 81c:	00 0c       	add	r0, r0
 81e:	44 0b       	sbc	r20, r20
 820:	55 0b       	sbc	r21, r21
 822:	60 e9       	ldi	r22, 0x90	; 144
 824:	70 ed       	ldi	r23, 0xD0	; 208
 826:	83 e0       	ldi	r24, 0x03	; 3
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	aa d2       	rcall	.+1364   	; 0xd80 <__divmodsi4>
 82c:	21 50       	subi	r18, 0x01	; 1
 82e:	31 09       	sbc	r19, r1
 830:	f2 01       	movw	r30, r4
 832:	31 83       	std	Z+1, r19	; 0x01
 834:	20 83       	st	Z, r18
 836:	80 92 03 02 	sts	0x0203, r8	; 0x800203 <flagUART>
				flagUART = 1;
 83a:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <flagADC>
			}
			//if(record_length3 > 0){
			if (flagADC == 1){
 83e:	81 30       	cpi	r24, 0x01	; 1
 840:	09 f0       	breq	.+2      	; 0x844 <main+0x20a>
 842:	34 cf       	rjmp	.-408    	; 0x6ac <main+0x72>
				if(sample_flag == 1){
 844:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sample_flag>
 848:	81 30       	cpi	r24, 0x01	; 1
 84a:	21 f4       	brne	.+8      	; 0x854 <main+0x21a>
					adc_packet_send(adc_buffer2);
 84c:	84 e2       	ldi	r24, 0x24	; 36
 84e:	9b e0       	ldi	r25, 0x0B	; 11
 850:	83 de       	rcall	.-762    	; 0x558 <adc_packet_send>
 852:	03 c0       	rjmp	.+6      	; 0x85a <main+0x220>
 854:	87 e2       	ldi	r24, 0x27	; 39
				}
				else{
					adc_packet_send(adc_buffer1);
 856:	93 e0       	ldi	r25, 0x03	; 3
 858:	7f de       	rcall	.-770    	; 0x558 <adc_packet_send>
 85a:	10 92 17 0b 	sts	0x0B17, r1	; 0x800b17 <flagADC>
				}
				flagADC = 0;
 85e:	26 cf       	rjmp	.-436    	; 0x6ac <main+0x72>
 860:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <flagUART>
			
			
			break;
		
			case 3:
			if(flagUART == 0){
 864:	81 11       	cpse	r24, r1
 866:	22 cf       	rjmp	.-444    	; 0x6ac <main+0x72>
				flagUART = 1;
 868:	80 92 03 02 	sts	0x0203, r8	; 0x800203 <flagUART>
			sendStrXY("Bodeplot    ",5,0);
 86c:	40 e0       	ldi	r20, 0x00	; 0
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	65 e0       	ldi	r22, 0x05	; 5
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	85 e0       	ldi	r24, 0x05	; 5
 876:	92 e0       	ldi	r25, 0x02	; 2
 878:	f7 d1       	rcall	.+1006   	; 0xc68 <sendStrXY>
 87a:	80 e1       	ldi	r24, 0x10	; 16

			init_timer1(10000);
 87c:	97 e2       	ldi	r25, 0x27	; 39
 87e:	4c de       	rcall	.-872    	; 0x518 <init_timer1>
 880:	70 92 19 02 	sts	0x0219, r7	; 0x800219 <Shape>
			Shape = 3; //sinus
 884:	90 92 18 02 	sts	0x0218, r9	; 0x800218 <Amplitude>
			Amplitude = 0xff; //3,3V
 888:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <j>

			for(j=0; j<255; j++){
 88c:	40 e0       	ldi	r20, 0x00	; 0
 88e:	61 2c       	mov	r6, r1
				Frequency = (j+1); //+1 da frekvensen ikke m? v?re 0

				MCU_to_FPGA(Shape,Amplitude,Frequency);
 890:	4f 5f       	subi	r20, 0xFF	; 255
			init_timer1(10000);
			Shape = 3; //sinus
			Amplitude = 0xff; //3,3V

			for(j=0; j<255; j++){
				Frequency = (j+1); //+1 da frekvensen ikke m? v?re 0
 892:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <Frequency>
 896:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <Amplitude>

				MCU_to_FPGA(Shape,Amplitude,Frequency);
 89a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Shape>
 89e:	3c d1       	rcall	.+632    	; 0xb18 <MCU_to_FPGA>
 8a0:	89 ee       	ldi	r24, 0xE9	; 233
 8a2:	93 e0       	ldi	r25, 0x03	; 3
 8a4:	49 2d       	mov	r20, r9
 8a6:	26 2d       	mov	r18, r6
 8a8:	30 91 1d 10 	lds	r19, 0x101D	; 0x80101d <Sample>
				Amplitude_min = 0xff; // sikre at sample er mindre f?rste gang
				Amplitude_max = 0x00; // sikre at sample er st?rre f?rste gang

				for(x=0; x<=1000; x++){

					if (Sample < Amplitude_min){
 8ac:	34 17       	cp	r19, r20
 8ae:	10 f4       	brcc	.+4      	; 0x8b4 <main+0x27a>
 8b0:	40 91 1d 10 	lds	r20, 0x101D	; 0x80101d <Sample>
						Amplitude_min = Sample;
 8b4:	30 91 1d 10 	lds	r19, 0x101D	; 0x80101d <Sample>
					}
					if (Sample > Amplitude_max){
 8b8:	23 17       	cp	r18, r19
 8ba:	10 f4       	brcc	.+4      	; 0x8c0 <main+0x286>
 8bc:	20 91 1d 10 	lds	r18, 0x101D	; 0x80101d <Sample>
						Amplitude_max = Sample;
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	91 f7       	brne	.-28     	; 0x8a8 <main+0x26e>
 8c4:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <x+0x1>
				MCU_to_FPGA(Shape,Amplitude,Frequency);

				Amplitude_min = 0xff; // sikre at sample er mindre f?rste gang
				Amplitude_max = 0x00; // sikre at sample er st?rre f?rste gang

				for(x=0; x<=1000; x++){
 8c8:	e0 92 25 03 	sts	0x0325, r14	; 0x800325 <x>
 8cc:	20 93 15 0b 	sts	0x0B15, r18	; 0x800b15 <Amplitude_max>
 8d0:	40 93 14 0b 	sts	0x0B14, r20	; 0x800b14 <Amplitude_min>
 8d4:	82 2f       	mov	r24, r18
 8d6:	90 e0       	ldi	r25, 0x00	; 0
					if (Sample > Amplitude_max){
						Amplitude_max = Sample;
					}
				}

				Amplitude_Bodeplot = (Amplitude_max - Amplitude_min)/2;
 8d8:	84 1b       	sub	r24, r20
 8da:	91 09       	sbc	r25, r1
 8dc:	9c 01       	movw	r18, r24
 8de:	12 f4       	brpl	.+4      	; 0x8e4 <main+0x2aa>
 8e0:	2f 5f       	subi	r18, 0xFF	; 255
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	35 95       	asr	r19
 8e6:	27 95       	ror	r18
 8e8:	20 93 16 0b 	sts	0x0B16, r18	; 0x800b16 <Amplitude_Bodeplot>
 8ec:	40 91 24 03 	lds	r20, 0x0324	; 0x800324 <j>

				Bodeplot_Array[j] = Amplitude_Bodeplot;
 8f0:	e4 2f       	mov	r30, r20
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	e0 5f       	subi	r30, 0xF0	; 240
 8f6:	f0 4f       	sbci	r31, 0xF0	; 240
 8f8:	20 83       	st	Z, r18
 8fa:	4f 5f       	subi	r20, 0xFF	; 255
 8fc:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <j>

			init_timer1(10000);
			Shape = 3; //sinus
			Amplitude = 0xff; //3,3V

			for(j=0; j<255; j++){
 900:	4f 3f       	cpi	r20, 0xFF	; 255
 902:	31 f6       	brne	.-116    	; 0x890 <main+0x256>
 904:	f1 01       	movw	r30, r2
 906:	20 81       	ld	r18, Z

				Amplitude_Bodeplot = (Amplitude_max - Amplitude_min)/2;

				Bodeplot_Array[j] = Amplitude_Bodeplot;
			}
			Amplitude_ref = Bodeplot_Array[0];
 908:	20 93 11 10 	sts	0x1011, r18	; 0x801011 <Amplitude_ref>
 90c:	85 e5       	ldi	r24, 0x55	; 85

			Bodeplot_Send[0] = 0x55;
 90e:	f5 01       	movw	r30, r10
 910:	80 83       	st	Z, r24
 912:	8a ea       	ldi	r24, 0xAA	; 170
			Bodeplot_Send[1] = 0xAA;
 914:	81 83       	std	Z+1, r24	; 0x01
 916:	82 82       	std	Z+2, r8	; 0x02
			Bodeplot_Send[2] = 0x01;
 918:	86 e0       	ldi	r24, 0x06	; 6
			Bodeplot_Send[3] = 0x06;
 91a:	83 83       	std	Z+3, r24	; 0x03
 91c:	74 82       	std	Z+4, r7	; 0x04
			Bodeplot_Send[4] = 0x03;
 91e:	a0 e1       	ldi	r26, 0x10	; 16
 920:	bf e0       	ldi	r27, 0x0F	; 15
 922:	e3 e2       	ldi	r30, 0x23	; 35
 924:	f2 e0       	ldi	r31, 0x02	; 2

			for(j=0; j<255; j++){
				Bodeplot_Send[j+5] = Bodeplot_Array[j] / Amplitude_ref;
 926:	8d 91       	ld	r24, X+
 928:	62 2f       	mov	r22, r18
 92a:	1e d2       	rcall	.+1084   	; 0xd68 <__udivmodqi4>
 92c:	81 93       	st	Z+, r24
 92e:	e0 17       	cp	r30, r16
			Bodeplot_Send[1] = 0xAA;
			Bodeplot_Send[2] = 0x01;
			Bodeplot_Send[3] = 0x06;
			Bodeplot_Send[4] = 0x03;

			for(j=0; j<255; j++){
 930:	f1 07       	cpc	r31, r17
 932:	c9 f7       	brne	.-14     	; 0x926 <main+0x2ec>
 934:	90 92 24 03 	sts	0x0324, r9	; 0x800324 <j>
 938:	f8 01       	movw	r30, r16
				Bodeplot_Send[j+5] = Bodeplot_Array[j] / Amplitude_ref;
			}

			Bodeplot_Send[260] = 0x00;
 93a:	10 82       	st	Z, r1
 93c:	e3 e2       	ldi	r30, 0x23	; 35
			Bodeplot_Send[261] = 0x00;
 93e:	f3 e0       	ldi	r31, 0x03	; 3
 940:	10 82       	st	Z, r1
 942:	65 e0       	ldi	r22, 0x05	; 5

			putsUSART1(Bodeplot_Send, 261);
 944:	71 e0       	ldi	r23, 0x01	; 1
 946:	c5 01       	movw	r24, r10
 948:	f4 d1       	rcall	.+1000   	; 0xd32 <putsUSART1>
 94a:	b0 ce       	rjmp	.-672    	; 0x6ac <main+0x72>
 94c:	81 30       	cpi	r24, 0x01	; 1
 94e:	09 f0       	breq	.+2      	; 0x952 <main+0x318>
			if (BTN==2){
				if (start_stop == 0){
					MCU_to_FPGA(Shape,Amplitude,Frequency); //start generator
					start_stop = 1;
				}
				if (start_stop == 1){
 950:	12 cf       	rjmp	.-476    	; 0x776 <main+0x13c>
 952:	01 cf       	rjmp	.-510    	; 0x756 <main+0x11c>

00000954 <__vector_17>:
 954:	1f 92       	push	r1
 956:	0f 92       	push	r0
			}
		}
	}


ISR(TIMER1_COMPA_vect){
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	0f 92       	push	r0
 95c:	11 24       	eor	r1, r1
 95e:	0b b6       	in	r0, 0x3b	; 59
 960:	0f 92       	push	r0
 962:	8f 93       	push	r24
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 968:	ea e7       	ldi	r30, 0x7A	; 122
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	80 64       	ori	r24, 0x40	; 64
 970:	80 83       	st	Z, r24
	
}
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	8f 91       	pop	r24
 978:	0f 90       	pop	r0
 97a:	0b be       	out	0x3b, r0	; 59
 97c:	0f 90       	pop	r0
 97e:	0f be       	out	0x3f, r0	; 63
 980:	0f 90       	pop	r0
 982:	1f 90       	pop	r1
 984:	18 95       	reti

00000986 <__vector_29>:

ISR(ADC_vect){
 986:	1f 92       	push	r1
 988:	0f 92       	push	r0
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	0f 92       	push	r0
 98e:	11 24       	eor	r1, r1
 990:	0b b6       	in	r0, 0x3b	; 59
 992:	0f 92       	push	r0
 994:	2f 93       	push	r18
 996:	3f 93       	push	r19
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	ef 93       	push	r30
 99e:	ff 93       	push	r31
	static int i = 0;
	Sample = ADCH;
 9a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 9a4:	80 93 1d 10 	sts	0x101D, r24	; 0x80101d <Sample>
	if(sample_flag == 1){
 9a8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sample_flag>
 9ac:	81 30       	cpi	r24, 0x01	; 1
 9ae:	11 f5       	brne	.+68     	; 0x9f4 <__vector_29+0x6e>
		adc_buffer1[i] = ADCH;
 9b0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <i.2561>
 9b4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <i.2561+0x1>
 9b8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 9bc:	fc 01       	movw	r30, r24
 9be:	e9 5d       	subi	r30, 0xD9	; 217
 9c0:	fc 4f       	sbci	r31, 0xFC	; 252
 9c2:	20 83       	st	Z, r18
		i++;
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <i.2561+0x1>
 9ca:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <i.2561>
		//	adc_buffer1[250] = 0xff;
		if(i > record_length3-1){
 9ce:	20 91 0f 07 	lds	r18, 0x070F	; 0x80070f <record_length3>
 9d2:	30 91 10 07 	lds	r19, 0x0710	; 0x800710 <record_length3+0x1>
 9d6:	21 50       	subi	r18, 0x01	; 1
 9d8:	31 09       	sbc	r19, r1
 9da:	28 17       	cp	r18, r24
 9dc:	39 07       	cpc	r19, r25
 9de:	5c f5       	brge	.+86     	; 0xa36 <__vector_29+0xb0>
			i = 0;
 9e0:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <i.2561+0x1>
 9e4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <i.2561>
			sample_flag = 0;
 9e8:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <sample_flag>
			flagADC = 1;
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <flagADC>
 9f2:	21 c0       	rjmp	.+66     	; 0xa36 <__vector_29+0xb0>
		}
	}
	else{
		adc_buffer2[i] = ADCH;
 9f4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <i.2561>
 9f8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <i.2561+0x1>
 9fc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 a00:	fc 01       	movw	r30, r24
 a02:	ec 5d       	subi	r30, 0xDC	; 220
 a04:	f4 4f       	sbci	r31, 0xF4	; 244
 a06:	20 83       	st	Z, r18
		i++;
 a08:	01 96       	adiw	r24, 0x01	; 1
 a0a:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <i.2561+0x1>
 a0e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <i.2561>
		//adc_buffer2[250] = 0x00;
		if(i > record_length3-1){
 a12:	20 91 0f 07 	lds	r18, 0x070F	; 0x80070f <record_length3>
 a16:	30 91 10 07 	lds	r19, 0x0710	; 0x800710 <record_length3+0x1>
 a1a:	21 50       	subi	r18, 0x01	; 1
 a1c:	31 09       	sbc	r19, r1
 a1e:	28 17       	cp	r18, r24
 a20:	39 07       	cpc	r19, r25
 a22:	4c f4       	brge	.+18     	; 0xa36 <__vector_29+0xb0>
			i = 0;
 a24:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <i.2561+0x1>
 a28:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <i.2561>
			sample_flag = 1;
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <sample_flag>
			flagADC = 1;
 a32:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <flagADC>
		}
	}
}
 a36:	ff 91       	pop	r31
 a38:	ef 91       	pop	r30
 a3a:	9f 91       	pop	r25
 a3c:	8f 91       	pop	r24
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	0f 90       	pop	r0
 a44:	0b be       	out	0x3b, r0	; 59
 a46:	0f 90       	pop	r0
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	0f 90       	pop	r0
 a4c:	1f 90       	pop	r1
 a4e:	18 95       	reti

00000a50 <__vector_36>:

ISR(USART1_RX_vect){
 a50:	1f 92       	push	r1
 a52:	0f 92       	push	r0
 a54:	0f b6       	in	r0, 0x3f	; 63
 a56:	0f 92       	push	r0
 a58:	11 24       	eor	r1, r1
 a5a:	0b b6       	in	r0, 0x3b	; 59
 a5c:	0f 92       	push	r0
 a5e:	2f 93       	push	r18
 a60:	3f 93       	push	r19
 a62:	8f 93       	push	r24
 a64:	9f 93       	push	r25
 a66:	ef 93       	push	r30
 a68:	ff 93       	push	r31
	static int i;
	static int max_len = 11;
	data_buffer[i] = UDR1;
 a6a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 a6e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 a72:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 a76:	fc 01       	movw	r30, r24
 a78:	ee 5e       	subi	r30, 0xEE	; 238
 a7a:	ff 4e       	sbci	r31, 0xEF	; 239
 a7c:	20 83       	st	Z, r18
	i++;
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 a84:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	if(data_buffer[4] == 1){
 a88:	20 91 16 10 	lds	r18, 0x1016	; 0x801016 <data_buffer+0x4>
 a8c:	21 30       	cpi	r18, 0x01	; 1
 a8e:	41 f4       	brne	.+16     	; 0xaa0 <__vector_36+0x50>
		type = 1;
 a90:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <type>
		max_len = 9;
 a94:	29 e0       	ldi	r18, 0x09	; 9
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 a9c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(data_buffer[4] == 2){
 aa0:	20 91 16 10 	lds	r18, 0x1016	; 0x801016 <data_buffer+0x4>
 aa4:	22 30       	cpi	r18, 0x02	; 2
 aa6:	41 f4       	brne	.+16     	; 0xab8 <__vector_36+0x68>
		type = 2;
 aa8:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <type>
		max_len = 11;
 aac:	2b e0       	ldi	r18, 0x0B	; 11
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 ab4:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(data_buffer[4] == 3){
 ab8:	20 91 16 10 	lds	r18, 0x1016	; 0x801016 <data_buffer+0x4>
 abc:	23 30       	cpi	r18, 0x03	; 3
 abe:	41 f4       	brne	.+16     	; 0xad0 <__vector_36+0x80>
		type = 3;
 ac0:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <type>
		max_len = 7;
 ac4:	27 e0       	ldi	r18, 0x07	; 7
 ac6:	30 e0       	ldi	r19, 0x00	; 0
 ac8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 acc:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
	}
	if(i == max_len){
 ad0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 ad4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 ad8:	82 17       	cp	r24, r18
 ada:	93 07       	cpc	r25, r19
 adc:	31 f4       	brne	.+12     	; 0xaea <__vector_36+0x9a>
		i = 0;
 ade:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
 ae2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
		flagUART = 0;
 ae6:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <flagUART>
	}

 aea:	ff 91       	pop	r31
 aec:	ef 91       	pop	r30
 aee:	9f 91       	pop	r25
 af0:	8f 91       	pop	r24
 af2:	3f 91       	pop	r19
 af4:	2f 91       	pop	r18
 af6:	0f 90       	pop	r0
 af8:	0b be       	out	0x3b, r0	; 59
 afa:	0f 90       	pop	r0
 afc:	0f be       	out	0x3f, r0	; 63
 afe:	0f 90       	pop	r0
 b00:	1f 90       	pop	r1
 b02:	18 95       	reti

00000b04 <SPI_MasterInit>:
 b04:	84 b1       	in	r24, 0x04	; 4
 b06:	87 60       	ori	r24, 0x07	; 7
 b08:	84 b9       	out	0x04, r24	; 4
 b0a:	8c b5       	in	r24, 0x2c	; 44
 b0c:	80 65       	ori	r24, 0x50	; 80
 b0e:	8c bd       	out	0x2c, r24	; 44
 b10:	8c b5       	in	r24, 0x2c	; 44
 b12:	83 60       	ori	r24, 0x03	; 3
 b14:	8c bd       	out	0x2c, r24	; 44
 b16:	08 95       	ret

00000b18 <MCU_to_FPGA>:
 b18:	7a e5       	ldi	r23, 0x5A	; 90
 b1a:	54 2f       	mov	r21, r20
 b1c:	57 27       	eor	r21, r23
 b1e:	56 27       	eor	r21, r22
 b20:	58 27       	eor	r21, r24
 b22:	21 e0       	ldi	r18, 0x01	; 1
 b24:	28 98       	cbi	0x05, 0	; 5
 b26:	7e bd       	out	0x2e, r23	; 46
 b28:	0d b4       	in	r0, 0x2d	; 45
 b2a:	07 fe       	sbrs	r0, 7
 b2c:	fd cf       	rjmp	.-6      	; 0xb28 <MCU_to_FPGA+0x10>
 b2e:	3e b5       	in	r19, 0x2e	; 46
 b30:	25 b9       	out	0x05, r18	; 5
 b32:	28 98       	cbi	0x05, 0	; 5
 b34:	8e bd       	out	0x2e, r24	; 46
 b36:	0d b4       	in	r0, 0x2d	; 45
 b38:	07 fe       	sbrs	r0, 7
 b3a:	fd cf       	rjmp	.-6      	; 0xb36 <MCU_to_FPGA+0x1e>
 b3c:	9e b5       	in	r25, 0x2e	; 46
 b3e:	25 b9       	out	0x05, r18	; 5
 b40:	28 98       	cbi	0x05, 0	; 5
 b42:	6e bd       	out	0x2e, r22	; 46
 b44:	0d b4       	in	r0, 0x2d	; 45
 b46:	07 fe       	sbrs	r0, 7
 b48:	fd cf       	rjmp	.-6      	; 0xb44 <MCU_to_FPGA+0x2c>
 b4a:	25 b9       	out	0x05, r18	; 5
 b4c:	28 98       	cbi	0x05, 0	; 5
 b4e:	4e bd       	out	0x2e, r20	; 46
 b50:	0d b4       	in	r0, 0x2d	; 45
 b52:	07 fe       	sbrs	r0, 7
 b54:	fd cf       	rjmp	.-6      	; 0xb50 <MCU_to_FPGA+0x38>
 b56:	25 b9       	out	0x05, r18	; 5
 b58:	28 98       	cbi	0x05, 0	; 5
 b5a:	5e bd       	out	0x2e, r21	; 46
 b5c:	0d b4       	in	r0, 0x2d	; 45
 b5e:	07 fe       	sbrs	r0, 7
 b60:	fd cf       	rjmp	.-6      	; 0xb5c <MCU_to_FPGA+0x44>
 b62:	25 b9       	out	0x05, r18	; 5
 b64:	33 0f       	add	r19, r19
 b66:	99 1f       	adc	r25, r25
 b68:	99 27       	eor	r25, r25
 b6a:	99 1f       	adc	r25, r25
 b6c:	93 2b       	or	r25, r19
 b6e:	59 13       	cpse	r21, r25
 b70:	d9 cf       	rjmp	.-78     	; 0xb24 <MCU_to_FPGA+0xc>
 b72:	08 95       	ret

00000b74 <ssd1306_command>:
 b74:	cf 93       	push	r28
 b76:	c8 2f       	mov	r28, r24
 b78:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_i2c_address>
 b7c:	87 dc       	rcall	.-1778   	; 0x48c <I2C_Start>
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	ab dc       	rcall	.-1706   	; 0x4d8 <I2C_Write>
 b82:	8c 2f       	mov	r24, r28
 b84:	a9 dc       	rcall	.-1710   	; 0x4d8 <I2C_Write>
 b86:	bf dc       	rcall	.-1666   	; 0x506 <I2C_Stop>
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <InitializeDisplay>:
 b8c:	8e ea       	ldi	r24, 0xAE	; 174
 b8e:	f2 df       	rcall	.-28     	; 0xb74 <ssd1306_command>
 b90:	85 ed       	ldi	r24, 0xD5	; 213
 b92:	f0 df       	rcall	.-32     	; 0xb74 <ssd1306_command>
 b94:	80 e8       	ldi	r24, 0x80	; 128
 b96:	ee df       	rcall	.-36     	; 0xb74 <ssd1306_command>
 b98:	88 ea       	ldi	r24, 0xA8	; 168
 b9a:	ec df       	rcall	.-40     	; 0xb74 <ssd1306_command>
 b9c:	8f e3       	ldi	r24, 0x3F	; 63
 b9e:	ea df       	rcall	.-44     	; 0xb74 <ssd1306_command>
 ba0:	83 ed       	ldi	r24, 0xD3	; 211
 ba2:	e8 df       	rcall	.-48     	; 0xb74 <ssd1306_command>
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	e6 df       	rcall	.-52     	; 0xb74 <ssd1306_command>
 ba8:	80 e4       	ldi	r24, 0x40	; 64
 baa:	e4 df       	rcall	.-56     	; 0xb74 <ssd1306_command>
 bac:	8d e8       	ldi	r24, 0x8D	; 141
 bae:	e2 df       	rcall	.-60     	; 0xb74 <ssd1306_command>
 bb0:	84 e1       	ldi	r24, 0x14	; 20
 bb2:	e0 df       	rcall	.-64     	; 0xb74 <ssd1306_command>
 bb4:	80 e2       	ldi	r24, 0x20	; 32
 bb6:	de df       	rcall	.-68     	; 0xb74 <ssd1306_command>
 bb8:	80 e0       	ldi	r24, 0x00	; 0
 bba:	dc df       	rcall	.-72     	; 0xb74 <ssd1306_command>
 bbc:	81 ea       	ldi	r24, 0xA1	; 161
 bbe:	da df       	rcall	.-76     	; 0xb74 <ssd1306_command>
 bc0:	88 ec       	ldi	r24, 0xC8	; 200
 bc2:	d8 df       	rcall	.-80     	; 0xb74 <ssd1306_command>
 bc4:	8a ed       	ldi	r24, 0xDA	; 218
 bc6:	d6 df       	rcall	.-84     	; 0xb74 <ssd1306_command>
 bc8:	82 e1       	ldi	r24, 0x12	; 18
 bca:	d4 df       	rcall	.-88     	; 0xb74 <ssd1306_command>
 bcc:	81 e8       	ldi	r24, 0x81	; 129
 bce:	d2 df       	rcall	.-92     	; 0xb74 <ssd1306_command>
 bd0:	8f ec       	ldi	r24, 0xCF	; 207
 bd2:	d0 df       	rcall	.-96     	; 0xb74 <ssd1306_command>
 bd4:	89 ed       	ldi	r24, 0xD9	; 217
 bd6:	ce df       	rcall	.-100    	; 0xb74 <ssd1306_command>
 bd8:	81 ef       	ldi	r24, 0xF1	; 241
 bda:	cc df       	rcall	.-104    	; 0xb74 <ssd1306_command>
 bdc:	8b ed       	ldi	r24, 0xDB	; 219
 bde:	ca df       	rcall	.-108    	; 0xb74 <ssd1306_command>
 be0:	80 e4       	ldi	r24, 0x40	; 64
 be2:	c8 df       	rcall	.-112    	; 0xb74 <ssd1306_command>
 be4:	84 ea       	ldi	r24, 0xA4	; 164
 be6:	c6 df       	rcall	.-116    	; 0xb74 <ssd1306_command>
 be8:	86 ea       	ldi	r24, 0xA6	; 166
 bea:	c4 df       	rcall	.-120    	; 0xb74 <ssd1306_command>
 bec:	8f ea       	ldi	r24, 0xAF	; 175
 bee:	c2 cf       	rjmp	.-124    	; 0xb74 <ssd1306_command>
 bf0:	08 95       	ret

00000bf2 <displayOn>:
 bf2:	8f ea       	ldi	r24, 0xAF	; 175
 bf4:	bf cf       	rjmp	.-130    	; 0xb74 <ssd1306_command>
 bf6:	08 95       	ret

00000bf8 <displayOff>:
 bf8:	8e ea       	ldi	r24, 0xAE	; 174
 bfa:	bc cf       	rjmp	.-136    	; 0xb74 <ssd1306_command>
 bfc:	08 95       	ret

00000bfe <SendChar>:
 bfe:	cf 93       	push	r28
 c00:	c8 2f       	mov	r28, r24
 c02:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_i2c_address>
 c06:	42 dc       	rcall	.-1916   	; 0x48c <I2C_Start>
 c08:	80 e4       	ldi	r24, 0x40	; 64
 c0a:	66 dc       	rcall	.-1844   	; 0x4d8 <I2C_Write>
 c0c:	8c 2f       	mov	r24, r28
 c0e:	64 dc       	rcall	.-1848   	; 0x4d8 <I2C_Write>
 c10:	7a dc       	rcall	.-1804   	; 0x506 <I2C_Stop>
 c12:	cf 91       	pop	r28
 c14:	08 95       	ret

00000c16 <setXY>:
 c16:	cf 93       	push	r28
 c18:	c6 2f       	mov	r28, r22
 c1a:	80 55       	subi	r24, 0x50	; 80
 c1c:	ab df       	rcall	.-170    	; 0xb74 <ssd1306_command>
 c1e:	8c 2f       	mov	r24, r28
 c20:	88 0f       	add	r24, r24
 c22:	88 0f       	add	r24, r24
 c24:	88 0f       	add	r24, r24
 c26:	88 70       	andi	r24, 0x08	; 8
 c28:	a5 df       	rcall	.-182    	; 0xb74 <ssd1306_command>
 c2a:	8c 2f       	mov	r24, r28
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	8f 70       	andi	r24, 0x0F	; 15
 c34:	80 5f       	subi	r24, 0xF0	; 240
 c36:	9e df       	rcall	.-196    	; 0xb74 <ssd1306_command>
 c38:	cf 91       	pop	r28
 c3a:	08 95       	ret

00000c3c <clear_display>:
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	d0 e0       	ldi	r29, 0x00	; 0
 c42:	60 e0       	ldi	r22, 0x00	; 0
 c44:	8d 2f       	mov	r24, r29
 c46:	e7 df       	rcall	.-50     	; 0xc16 <setXY>
 c48:	c0 e0       	ldi	r28, 0x00	; 0
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	d8 df       	rcall	.-80     	; 0xbfe <SendChar>
 c4e:	cf 5f       	subi	r28, 0xFF	; 255
 c50:	c0 38       	cpi	r28, 0x80	; 128
 c52:	d9 f7       	brne	.-10     	; 0xc4a <clear_display+0xe>
 c54:	df 5f       	subi	r29, 0xFF	; 255
 c56:	d8 30       	cpi	r29, 0x08	; 8
 c58:	a1 f7       	brne	.-24     	; 0xc42 <clear_display+0x6>
 c5a:	df 91       	pop	r29
 c5c:	cf 91       	pop	r28
 c5e:	08 95       	ret

00000c60 <reset_display>:
 c60:	cb df       	rcall	.-106    	; 0xbf8 <displayOff>
 c62:	ec df       	rcall	.-40     	; 0xc3c <clear_display>
 c64:	c6 cf       	rjmp	.-116    	; 0xbf2 <displayOn>
 c66:	08 95       	ret

00000c68 <sendStrXY>:
 c68:	ff 92       	push	r15
 c6a:	0f 93       	push	r16
 c6c:	1f 93       	push	r17
 c6e:	cf 93       	push	r28
 c70:	df 93       	push	r29
 c72:	ec 01       	movw	r28, r24
 c74:	86 2f       	mov	r24, r22
 c76:	f6 2e       	mov	r15, r22
 c78:	64 2f       	mov	r22, r20
 c7a:	cd df       	rcall	.-102    	; 0xc16 <setXY>
 c7c:	98 81       	ld	r25, Y
 c7e:	99 23       	and	r25, r25
 c80:	31 f1       	breq	.+76     	; 0xcce <sendStrXY+0x66>
 c82:	f3 94       	inc	r15
 c84:	9a 30       	cpi	r25, 0x0A	; 10
 c86:	39 f4       	brne	.+14     	; 0xc96 <sendStrXY+0x2e>
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	8f 2d       	mov	r24, r15
 c8c:	c4 df       	rcall	.-120    	; 0xc16 <setXY>
 c8e:	8e 01       	movw	r16, r28
 c90:	0f 5f       	subi	r16, 0xFF	; 255
 c92:	1f 4f       	sbci	r17, 0xFF	; 255
 c94:	01 c0       	rjmp	.+2      	; 0xc98 <sendStrXY+0x30>
 c96:	8e 01       	movw	r16, r28
 c98:	c0 e0       	ldi	r28, 0x00	; 0
 c9a:	d0 e0       	ldi	r29, 0x00	; 0
 c9c:	d8 01       	movw	r26, r16
 c9e:	ec 91       	ld	r30, X
 ca0:	f0 e0       	ldi	r31, 0x00	; 0
 ca2:	ee 0f       	add	r30, r30
 ca4:	ff 1f       	adc	r31, r31
 ca6:	ee 0f       	add	r30, r30
 ca8:	ff 1f       	adc	r31, r31
 caa:	ee 0f       	add	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	ec 51       	subi	r30, 0x1C	; 28
 cb0:	f0 40       	sbci	r31, 0x00	; 0
 cb2:	ec 0f       	add	r30, r28
 cb4:	fd 1f       	adc	r31, r29
 cb6:	84 91       	lpm	r24, Z
 cb8:	a2 df       	rcall	.-188    	; 0xbfe <SendChar>
 cba:	21 96       	adiw	r28, 0x01	; 1
 cbc:	c8 30       	cpi	r28, 0x08	; 8
 cbe:	d1 05       	cpc	r29, r1
 cc0:	69 f7       	brne	.-38     	; 0xc9c <sendStrXY+0x34>
 cc2:	e8 01       	movw	r28, r16
 cc4:	21 96       	adiw	r28, 0x01	; 1
 cc6:	f8 01       	movw	r30, r16
 cc8:	91 81       	ldd	r25, Z+1	; 0x01
 cca:	91 11       	cpse	r25, r1
 ccc:	db cf       	rjmp	.-74     	; 0xc84 <sendStrXY+0x1c>
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
 cd2:	1f 91       	pop	r17
 cd4:	0f 91       	pop	r16
 cd6:	ff 90       	pop	r15
 cd8:	08 95       	ret

00000cda <uart_Init>:
 cda:	22 e0       	ldi	r18, 0x02	; 2
 cdc:	20 93 c8 00 	sts	0x00C8, r18	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 ce0:	e9 ec       	ldi	r30, 0xC9	; 201
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	20 81       	ld	r18, Z
 ce6:	28 69       	ori	r18, 0x98	; 152
 ce8:	20 83       	st	Z, r18
 cea:	ea ec       	ldi	r30, 0xCA	; 202
 cec:	f0 e0       	ldi	r31, 0x00	; 0
 cee:	20 81       	ld	r18, Z
 cf0:	26 60       	ori	r18, 0x06	; 6
 cf2:	20 83       	st	Z, r18
 cf4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 cf8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
 cfc:	08 95       	ret

00000cfe <uart0_Init>:
 cfe:	22 e0       	ldi	r18, 0x02	; 2
 d00:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 d04:	e1 ec       	ldi	r30, 0xC1	; 193
 d06:	f0 e0       	ldi	r31, 0x00	; 0
 d08:	20 81       	ld	r18, Z
 d0a:	28 61       	ori	r18, 0x18	; 24
 d0c:	20 83       	st	Z, r18
 d0e:	e2 ec       	ldi	r30, 0xC2	; 194
 d10:	f0 e0       	ldi	r31, 0x00	; 0
 d12:	20 81       	ld	r18, Z
 d14:	26 60       	ori	r18, 0x06	; 6
 d16:	20 83       	st	Z, r18
 d18:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 d1c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 d20:	08 95       	ret

00000d22 <putchUSART1>:
 d22:	e8 ec       	ldi	r30, 0xC8	; 200
 d24:	f0 e0       	ldi	r31, 0x00	; 0
 d26:	90 81       	ld	r25, Z
 d28:	95 ff       	sbrs	r25, 5
 d2a:	fd cf       	rjmp	.-6      	; 0xd26 <putchUSART1+0x4>
 d2c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 d30:	08 95       	ret

00000d32 <putsUSART1>:
 d32:	ef 92       	push	r14
 d34:	ff 92       	push	r15
 d36:	0f 93       	push	r16
 d38:	1f 93       	push	r17
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	8c 01       	movw	r16, r24
 d40:	7b 01       	movw	r14, r22
 d42:	77 23       	and	r23, r23
 d44:	54 f0       	brlt	.+20     	; 0xd5a <putsUSART1+0x28>
 d46:	c0 e0       	ldi	r28, 0x00	; 0
 d48:	d0 e0       	ldi	r29, 0x00	; 0
 d4a:	f8 01       	movw	r30, r16
 d4c:	81 91       	ld	r24, Z+
 d4e:	8f 01       	movw	r16, r30
 d50:	e8 df       	rcall	.-48     	; 0xd22 <putchUSART1>
 d52:	21 96       	adiw	r28, 0x01	; 1
 d54:	ec 16       	cp	r14, r28
 d56:	fd 06       	cpc	r15, r29
 d58:	c4 f7       	brge	.-16     	; 0xd4a <putsUSART1+0x18>
 d5a:	df 91       	pop	r29
 d5c:	cf 91       	pop	r28
 d5e:	1f 91       	pop	r17
 d60:	0f 91       	pop	r16
 d62:	ff 90       	pop	r15
 d64:	ef 90       	pop	r14
 d66:	08 95       	ret

00000d68 <__udivmodqi4>:
 d68:	99 1b       	sub	r25, r25
 d6a:	79 e0       	ldi	r23, 0x09	; 9
 d6c:	04 c0       	rjmp	.+8      	; 0xd76 <__udivmodqi4_ep>

00000d6e <__udivmodqi4_loop>:
 d6e:	99 1f       	adc	r25, r25
 d70:	96 17       	cp	r25, r22
 d72:	08 f0       	brcs	.+2      	; 0xd76 <__udivmodqi4_ep>
 d74:	96 1b       	sub	r25, r22

00000d76 <__udivmodqi4_ep>:
 d76:	88 1f       	adc	r24, r24
 d78:	7a 95       	dec	r23
 d7a:	c9 f7       	brne	.-14     	; 0xd6e <__udivmodqi4_loop>
 d7c:	80 95       	com	r24
 d7e:	08 95       	ret

00000d80 <__divmodsi4>:
 d80:	05 2e       	mov	r0, r21
 d82:	97 fb       	bst	r25, 7
 d84:	16 f4       	brtc	.+4      	; 0xd8a <__divmodsi4+0xa>
 d86:	00 94       	com	r0
 d88:	0f d0       	rcall	.+30     	; 0xda8 <__negsi2>
 d8a:	57 fd       	sbrc	r21, 7
 d8c:	05 d0       	rcall	.+10     	; 0xd98 <__divmodsi4_neg2>
 d8e:	14 d0       	rcall	.+40     	; 0xdb8 <__udivmodsi4>
 d90:	07 fc       	sbrc	r0, 7
 d92:	02 d0       	rcall	.+4      	; 0xd98 <__divmodsi4_neg2>
 d94:	46 f4       	brtc	.+16     	; 0xda6 <__divmodsi4_exit>
 d96:	08 c0       	rjmp	.+16     	; 0xda8 <__negsi2>

00000d98 <__divmodsi4_neg2>:
 d98:	50 95       	com	r21
 d9a:	40 95       	com	r20
 d9c:	30 95       	com	r19
 d9e:	21 95       	neg	r18
 da0:	3f 4f       	sbci	r19, 0xFF	; 255
 da2:	4f 4f       	sbci	r20, 0xFF	; 255
 da4:	5f 4f       	sbci	r21, 0xFF	; 255

00000da6 <__divmodsi4_exit>:
 da6:	08 95       	ret

00000da8 <__negsi2>:
 da8:	90 95       	com	r25
 daa:	80 95       	com	r24
 dac:	70 95       	com	r23
 dae:	61 95       	neg	r22
 db0:	7f 4f       	sbci	r23, 0xFF	; 255
 db2:	8f 4f       	sbci	r24, 0xFF	; 255
 db4:	9f 4f       	sbci	r25, 0xFF	; 255
 db6:	08 95       	ret

00000db8 <__udivmodsi4>:
 db8:	a1 e2       	ldi	r26, 0x21	; 33
 dba:	1a 2e       	mov	r1, r26
 dbc:	aa 1b       	sub	r26, r26
 dbe:	bb 1b       	sub	r27, r27
 dc0:	fd 01       	movw	r30, r26
 dc2:	0d c0       	rjmp	.+26     	; 0xdde <__udivmodsi4_ep>

00000dc4 <__udivmodsi4_loop>:
 dc4:	aa 1f       	adc	r26, r26
 dc6:	bb 1f       	adc	r27, r27
 dc8:	ee 1f       	adc	r30, r30
 dca:	ff 1f       	adc	r31, r31
 dcc:	a2 17       	cp	r26, r18
 dce:	b3 07       	cpc	r27, r19
 dd0:	e4 07       	cpc	r30, r20
 dd2:	f5 07       	cpc	r31, r21
 dd4:	20 f0       	brcs	.+8      	; 0xdde <__udivmodsi4_ep>
 dd6:	a2 1b       	sub	r26, r18
 dd8:	b3 0b       	sbc	r27, r19
 dda:	e4 0b       	sbc	r30, r20
 ddc:	f5 0b       	sbc	r31, r21

00000dde <__udivmodsi4_ep>:
 dde:	66 1f       	adc	r22, r22
 de0:	77 1f       	adc	r23, r23
 de2:	88 1f       	adc	r24, r24
 de4:	99 1f       	adc	r25, r25
 de6:	1a 94       	dec	r1
 de8:	69 f7       	brne	.-38     	; 0xdc4 <__udivmodsi4_loop>
 dea:	60 95       	com	r22
 dec:	70 95       	com	r23
 dee:	80 95       	com	r24
 df0:	90 95       	com	r25
 df2:	9b 01       	movw	r18, r22
 df4:	ac 01       	movw	r20, r24
 df6:	bd 01       	movw	r22, r26
 df8:	cf 01       	movw	r24, r30
 dfa:	08 95       	ret

00000dfc <_exit>:
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
